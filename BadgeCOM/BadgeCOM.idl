//
// BadgeCOM.idl
// Cloud Windows COM
//
// Created By DavidBruck.
// Copyright (c) Cloud.com. All rights reserved.

// BadgeCOM.idl : IDL source for BadgeCOM
//

// This file will be processed by the MIDL tool to
// produce the type library (BadgeCOM.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";


[
	uuid(B0E0EEB6-3C6D-4F7A-90AE-A0C285F4D8C1),
	version(1.0),
]
library BadgeCOMLib
{
	importlib("stdole2.tlb");

    [
	    object,
	    uuid(46991EC7-7E83-4E3A-8E21-757792BBA5C4),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconSyncing : IDispatch{
    };
    [
	    object,
	    uuid(0CC774F1-545A-4129-8B09-8655C5370F54),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconSynced : IDispatch{
    };
    [
	    object,
	    uuid(77D3D99A-1EF6-41F7-A247-229939ADC1D9),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconSelective : IDispatch{
    };
    [
	    object,
	    uuid(2A204983-6DE7-42D2-BBB1-FCD5FCBD8026),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconFailed : IDispatch{
    };
    [
	    object,
	    uuid(7ADF06AF-3F02-4686-9704-B94A1667D284),
        dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IPubSubServer : IUnknown{
        typedef [v1_enum] enum 
        {
            RC_SUBSCRIBE_GOT_EVENT = 0,                     // we received a subscribed event
            RC_SUBSCRIBE_TRY_AGAIN,                         // call Subscribe again to receive a waiting subscribed event.
            RC_SUBSCRIBE_TIMED_OUT,                         // timed out waiting for an event.
            RC_SUBSCRIBE_CANCELLED,                         // the wait was cancelled.
            RC_SUBSCRIBE_ERROR                              // an error occurred.  Usually an exception.
        } EnumPubSubServerSubscribeReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_PUBLISH_OK = 0,                              // published OK.
            RC_PUBLISH_AT_LEAST_ONE_EVENT_QUEUE_FULL,       // at least one subscriber's event queue was full.
            RC_PUBLISH_ERROR                                // an error occurred.  Usually an exception.
        } EnumPubSubServerPublishReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_CANCEL_OK = 0,                               // subscription found and cancelled
            RC_CANCEL_CANCELLED_BUT_SUBSCRIPTION_NOT_REMOVED,  // subscription found, wait cancelled, but subscription not removed.
            RC_CANCEL_NOT_FOUND,                            // subscription not found
            RC_CANCEL_ERROR                                 // an error occurred.  Usually an exception.
        } EnumPubSubServerCancelWaitingSubscriptionReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_CANCELBYPROCESSID_OK = 0,                    // subscriptions found and cancelled
            RC_CANCELBYPROCESSID_NOT_FOUND,                 // no subscriptions found
            RC_CANCELBYPROCESSID_ERROR                      // an error occurred.  Usually an exception.
        } EnumPubSubServerCancelSubscriptionsByProcessIdReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_CLEANUPUNUSEDRESOURCES_OK = 0,               // cleaned up OK
            RC_CLEANUPUNUSEDRESOURCES_ERROR                 // cleaned up OK
        } EnumPubSubServerCleanUpUnusedResourcesReturnCodes;
        
        typedef [v1_enum] enum 
        {
            BadgeCom_To_BadgeNet=0,
            BadgeNet_To_BadgeCom,
        } EnumEventType;

        typedef [v1_enum] enum 
        {
            BadgeCom_Initialization=0,
            BadgeNet_AddSyncBoxFolderPath,
            BadgeNet_RemoveSyncBoxFolderPath,
            BadgeNet_AddBadgePath,
            BadgeNet_RemoveBadgePath
        } EnumEventSubType;

        typedef [v1_enum] enum 
        {
            cloudAppBadgeNone=0,
            cloudAppBadgeSynced,
            cloudAppBadgeSyncing,
            cloudAppBadgeFailed,
            cloudAppBadgeSyncSelective
        } EnumCloudAppIconBadgeType;

	    [id(1), helpstring("method Initialize")] HRESULT(Initialize)();

	    [id(2), helpstring("method Publish")] HRESULT(Publish)(
                        [in] EnumEventType EventType, 
                        [in] EnumEventSubType EventSubType, 
                        [in] EnumCloudAppIconBadgeType BadgeType, 
                        [in] BSTR *FullPath, 
                        [in] GUID GuidPublisher,
                        [out, retval] EnumPubSubServerPublishReturnCodes *returnValue);

	    [id(3), helpstring("method Subscribe")] HRESULT(Subscribe)(
                        [in] EnumEventType EventType,
                        [in] GUID guidSubscriber,
                        [in] ULONG TimeoutMilliseconds,
                        [out] EnumEventSubType *outEventSubType,
                        [out] EnumCloudAppIconBadgeType *outBadgeType,
                        [out] BSTR *outFullPath,
                        [out] ULONG *outProcessId,
                        [out] GUID *GuidPublisher,
                        [out, retval] EnumPubSubServerSubscribeReturnCodes *returnValue);

	    [id(4), helpstring("method CancelWaitingSubscription")] HRESULT(CancelWaitingSubscription)(
                        [in] EnumEventType EventType,
                        [in] GUID guidSubscriber,
                        [out, retval] EnumPubSubServerCancelWaitingSubscriptionReturnCodes *returnValue);

	    [id(5), helpstring("method CancelSubscriptionsForProcessId")] HRESULT(CancelSubscriptionsForProcessId)(
                        [in] ULONG ProcessId,
                        [out, retval] EnumPubSubServerCancelSubscriptionsByProcessIdReturnCodes *returnValue);

	    [id(6), helpstring("method CleanUpUnusedResources")] HRESULT(CleanUpUnusedResources)(
                        [out, retval] EnumPubSubServerCleanUpUnusedResourcesReturnCodes *returnValue);

	    [id(7), helpstring("method Terminate")] HRESULT(Terminate)();

        [propget, id(8), helpstring("Name associated with the badging shared memory segment."), bindable] HRESULT SharedMemoryName([out, retval] BSTR* pVal);
    };

	[
		uuid(37E0ECAE-BEA1-4096-9D84-440A7C9AC9E4)		
	]
	coclass BadgeIconSyncing
	{
		[default] interface IBadgeIconSyncing;
	};
	[
		uuid(16FDC851-D9B0-4591-B54A-9A50D58226CC)		
	]
	coclass BadgeIconSynced
	{
		[default] interface IBadgeIconSynced;
	};
	[
		uuid(A46EB4D6-B7F7-4255-912F-C151D78E26F8)		
	]
	coclass BadgeIconSelective
	{
		[default] interface IBadgeIconSelective;
	};
	[
		uuid(49C685C9-CD72-4588-8800-2B30C49723A1)		
	]
	coclass BadgeIconFailed
	{
		[default] interface IBadgeIconFailed;
	};
	[
		uuid(53AC487B-051C-476F-AE8A-FE660AA427B8)		
	]
	coclass PubSubServer
	{
		[default] interface IPubSubServer;
	};
};

import "shobjidl.idl";
