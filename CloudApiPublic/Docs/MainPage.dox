/// \mainpage SyncBoxes made easy!
///
/// \section intro_sec Introduction
///
/// The Cloud Windows Client SDK allows your application to easily support real time file synchronization services.
///
/// A SyncBox can be thought of as a folder with a hierarhical directory structure.  Any files placed in a SyncBox can be automatically
/// synced to the same SyncBox on all of your other devices (Windows, Mac, iOS, Android and Windows RT).  Your account can have multiple
/// SyncBoxes, and your application can open multiple SyncBoxes on a device.
///
/// In desktop environments, a SyncBox is tied to a particular local disk directory.  e.g., on Windows, "C:\Users\<UserName>\<YourSyncBoxName>".
///
/// See how easy it is:
///
/// \code{.cs}
/// public static class MyApplication
/// {
///     public static int main(string[] args)
///     {
///         // ...
///         // Set the parameters for your SyncBox.
///         ISyncSettings settings = new SyncSettings(
///             SyncBoxFolderFullPath: "<full path of SyncBox folder>",
///             RegistrationInfoApplicationId: "...",   // provided by the registration process
///             RegistrationInfoSyncBoxId: "...",       // provided by the application developer through the registration process
///             RegistrationInfoDeviceId: "...",        // provided by the registration process
///             DatabaseFolderFullPath: "<full path of the folder to contain the database file IndexDB.sdf>",
///                 );
///         
///         // Construct the SyncBox object.
///         CLSync box = new CLSync();
/// 
///         // Subscribe to the events (notifications).
///         box.ActivityMessage += OnActivityMessage;
///     
///         // Start syncing with the settings.
///         CLSyncStartStatus startStatus;
///         box.Start(settings, out startStatus ); 
///         if (startStatus != CLSyncStartStatus.Successful)
///         {
///             // Handle error here
///         }
///     
///         // ...
///     
///         // Stop syncing
///         box.Stop();
///         // ...
///     }
/// 
///     private void OnActivityMessage(object sender, ActivityMessageArgs e)
///     {
///         // Handle the event
///         switch (e.Message.MessageType)
///         {
///             case EnumMessageType.Informational:
///                 MessageBox.Show("Informational message: " + e.Message.Message);  // example only
///                 break;
/// 
///             case EnumMessageType.SyncStarted:
///                 MessageBox.Show("Sync has started");    // example only
///                 break;
/// 
///             case EnumMessageType.SyncStopped:
///                 MessageBox.Show("Sync has stopped");    // example only
///                 break;
/// 
///             // other cases....
///         }
///     }
/// }
/// \endcode
///
/// The code above will automatically sync files in the "SyncBox1" directory with your other devices related to this SyncBox, and with the SyncBox on the Cloud servers.
///
/// Should you need more extensive control over the syncing process, the API will allow you to implement your own methods for full control, including real time sync status and server push notification.
///
/// \section install_sec Installation
///
/// Get started by following the steps below:
/// - Browse to the Cloud download page at http://developer.cliff.cloudburrito.com.
/// - Click the Download button to download the Windows Cloud SDK installation program.
/// - Follow the instructions to install the Cloud SDK.
/// - You will find the following items in your Start menu:
///   . Cloud.com
///     o Cloud
///       - Start CloudSdkSyncSample: Starts the pre-built sample program which demonstrates the use of the API provided in the SDK.
///       - Show SDK Documentation: Launches your default browser to view this documentation.
///       - 
/// - Run the CloudSdkSyncSample.exe program and use it to sign up for a free Cloud account.
/// - You will find this documentation in "C:\Program Files (x86)\Cloud.com\CloudSyncSample\Docs".
/// - Use Visual Studio to load the sample program at "C:\Program Files (x86)\Cloud.com\Cloud\CloudSdkSyncSample\CloudSdkSyncSampleSyncBox.sln".
/// - Enjoy!
/// .
///
/// \section copyright_sec Copyright (C) Cloud.com.  All Rights Reserved.
/// http://www.cloud.com
/// \page DevOnlyPage1 A Guide to the Cloud API Design
/// \code{.txt}
/// . Namespaces
///   o ClSync
///   o CLPushNotification
/// . Interfaces
///   o ISyncSettings
///     - Required properties:
///       . string SyncBoxFolderFullPath
///       . string RegistrationInfoApplicationId
///       . string RegistrationInfoSyncBoxId
///       . string RegistrationInfoDeviceId
/// . CLSync Class
///   o Constructor
///     - SyncBox(ISyncSettings settings)
///       . settings must be valid
///       . May throw exceptions
///   o Public methods
///     - Start()
///       . May throw exceptions
///     - void Stop()
///   o Public properties
///     - Read-write properties:
///       . None.
///     - Read-only properties:
///       . bool IsSyncStarted
///       . int NumberOfQueuedFileUploads
///       . int NumberOfActiveFileUploads
///       . int NumberOfQueuedFileDownloads
///       . int NumberOfActiveFileDownloads
///       . long TotalPendingUploadBytes
///       . long TotalPendingDownloadBytes
///       . string FriendlyDeviceName
///       . string FriendlyApplicationName
///       . string FriendlySyncBoxName
///       . string SyncBoxFolderFullPath
///       . string RegistrationInfoApplicationId
///       . string RegistrationInfoSyncBoxId
///       . string RegistrationInfoDeviceId
///   o Events
///     - All activity events provide an IActivityMessage.
///     - IActivityMessage is an interface with two required properties: 
///       . string Message
///       . enum MessageType
///     - There are many implementations of IActivityMessage provided by the SDK.
///     - Each contains specific properties, and all implement the required Message and MessageType properties (IActivityMessage).
///     - The Windows SDK implements these classes as "public sealed", and all of the properties are publc read-only.
///     - The user can read all or any of the public properties, but cannot derive the class (because it is sealed).
///     - The simplest implentation class of IActivityMessage is:
///           public sealed class InformationalMessage : IActivityMessage
///           {
///               public EnumMessageType MessageType 
///               {
///                   get
///                   {
///                       return EnumMessageType.Informational;
///                   }
///               }
///               public string Message { get; private set; }
///               public InformationalMessage(string message)
///               {
///                   this.Message = message;
///               }
///           }
///     - The enum is defined as:
///           public enum EnumMessageType
///           {
///               Informational,
///               FilesUploaded,
///               NextType1,
///               NextType2,
///               etc....
///           }
///     - A slightly more complex implementation would be something like "23 files uploaded".
///           public sealed class FilesUploadedMessage : IActivityMessage
///           {
///               public EnumMessageType MessageType 
///               {
///                   get
///                   {
///                       return EnumMessageType.FilesUploaded;
///                   }
///               }
///               public string Message
///               {
///                   get
///                   {
///                       // Return formatted message
///                       FileCount.ToString() + " files uploaded";
///                   }
///               }
///               public int FileCount { get; private set; }
///               public FilesUploadedMessage(int fileCount)
///               {
///                   this.FileCount = fileCount;
///               }
///           }
///     - There will be many implementations of IActivityMessage.  The implementations will fall into general categories:
///       . SyncStarted
///       . SyncStopped
///       . Informational summary
///       . Informational detail
///       . Informational error
///       . Serious error
///     - As the teams define these implementations, we should attempt to use the same definitions.
///       . We will define a Podio page to document these implementations.
///       . Each team will submit implementations and other teams will attempt to use the same definition, negotiating when appropriate.
///     - The EventArgs that will be passed to the event is defined as:
///           public sealed class ActivityMessageArgs : EventArgs
///           {
///               public IActivityMessage Message { get; private set; }
///               public ActivityMessageArgs(IActivityMessage message)
///               {
///                   this.Message = message;
///               }
///           }
///     - The event is defined as:
///           public event EventHandler<ActivityMessageArgs> ActivityMessage;
///   o Sample code:
///     - Application
///       public static class MyApplication
///       {
///           public static int main(string[] args)
///           {
///               // ...
///               // Set the parameters for your SyncBox.
///               ISyncSettings settings = new SyncSettings(
///                   SyncBoxFolderFullPath: "<full path of SyncBox folder>",
///                   RegistrationInfoApplicationId: "...",   // provided by the registration process
///                   RegistrationInfoSyncBoxId: "...",       // provided by the application developer through the registration process
///                   RegistrationInfoDeviceId: "...",        // provided by the registration process
///                   DatabaseFolderFullPath: "<full path of the folder to contain the database file IndexDB.sdf>",
///                    );
///         
///               // Construct the SyncBox object with the settings.
///               CLSync box = new CLSync(settings);
/// 
///               // Subscribe to the events (notifications).
///               box.ActivityMessage += OnActivityMessage;
///     
///               // Start syncing
///               box.Start(); 
///     
///               // ...
///     
///               // Stop syncing
///               box.Stop();
///               // ...
///           }
/// 
///           private void OnActivityMessage(object sender, ActivityMessageArgs e)
///           {
///               // Handle the event
///               switch (e.Message.MessageType)
///               {
///                   case EnumMessageType.Informational:
///                       MessageBox.Show("Informational message: " + e.Message.Message);  // example only
///                       break;
/// 
///                   case EnumMessageType.SyncStarted:
///                       MessageBox.Show("Sync has started");    // example only
///                       break;
/// 
///                   case EnumMessageType.SyncStopped:
///                       MessageBox.Show("Sync has stopped");    // example only
///                       break;
/// 
///                   // other cases....
///               }
///           }
///       }
/// \endcode
///
/// \namespace CloudApiPublic
/// \brief Contains all public API functions of Cloud for Windows XP through Windows 8. See detailed description.
///
/// Primary components:\n
/// \link CloudApiPublic.CLSync CLSync \endlink performs active sync of files and folders within a specified path to a syncbox in Cloud.\n
/// \link CloudApiPublic.PushNotification.CLNotification PushNotification.CLNotification \endlink allows manual subscription to push notifications and is used internally by \link CloudApiPublic.CLSync CLSync \endlink.\n
/// \link CloudApiPublic.REST.CLHttpRest REST.CLHttpRest \endlink allows manual access to Cloud communication methods for file\folder queries, posting changes, and file transfer. It is used internally by \link CloudApiPublic.CLSync CLSync \endlink.\n
/// \link CloudApiPublic.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink acts as a view model for status changes such as growls and sync status messages. It also exposes events for messages and status changes. \link CloudApiPublic.CLSync CLSync \endlink fires event callbacks upon changes.\n
/// \link CloudApiPublic.Support.CLTrace Support.CLTrace \endlink writes a message to log from a required format string and any object parameter arguments. It is used conditionally by other public API classes when instantiated with advanced settings for trace.
///
/// \namespace CloudApiPublic.EventMessageReceiver
/// \brief Contains the \link CloudApiPublic.EventMessageReceiver.EventMessageReceiver EventMessageReceiver \endlink which acts as a view model for status changes such as growls and sync status messages. It also exposes events for messages and status changes.
///
/// \namespace CloudApiPublic.Interfaces
/// \brief Contains interfaces required as inputs for various public API functions.
///
/// \namespace CloudApiPublic.JsonContracts
/// \brief Contains deserialized request or response objects for HTTP REST communication to Cloud.
///
/// \namespace CloudApiPublic.Model
/// \brief Contains various objects exposed through public API functions.
///
/// \namespace CloudApiPublic.PushNotification
/// \brief Contains the \link CloudApiPublic.PushNotification.CLNotification CLNotification \endlink which allows manual subscription to push notifications.
///
/// \namespace CloudApiPublic.REST
/// \brief Contains the \link CloudApiPublic.REST.CLHttpRest CLHttpRest \endlink which allows manual access to Cloud communication methods for file\folder queries, posting changes, and file transfer.
///
/// \namespace CloudApiPublic.Static
/// \brief Contains various static helper classes such as \link CloudApiPublic.Static.Helpers Helpers \endlink
///
/// \namespace CloudApiPublic.Support
/// \brief Contains the \link CloudApiPublic.Support.CLTrace CLTrace \endlink which writes a message to log from a required format string and any object parameter arguments.
///
/// \namespace CloudApiPublicSamples
/// \brief Contains sample code which implements \link CloudApiPublic CloudApiPublic \endlink library and uses it to allow single folder active sync; it also can display status changes.