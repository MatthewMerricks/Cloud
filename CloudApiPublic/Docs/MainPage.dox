/// \mainpage Syncboxes made easy!
///
/// \section intro_sec Introduction
///
/// The Cloud Windows Client SDK allows your application to easily support real time file synchronization services.
///
/// A Syncbox can be thought of as a folder with a hierarchical directory structure.  Any files placed in a Syncbox can be automatically
/// synced to the same Syncbox on all of your other devices (Windows, Mac, iOS and Android, etc.).
///
/// An application can have a Syncbox which can have multiple devices. The ID of a device should be unique within a particular Syncbox.
/// A physical computer (e.g., a local Windows Machine) may have multiple Syncboxes running under multiple applications in different or possibly overlapping local directories.  Each of the SyncboxId-DeviceId pairs must be unique on a given machine.
///
/// In desktop environments, a Syncbox is tied to a particular local disk directory.  e.g., on Windows, "C:\\Users\\<UserName>\\<YourSyncboxName>".
///
/// To begin syncing, you will need to:     
/// - Specify your credential.
/// - Specify the path to be synced.
/// - Create a Syncbox object with the above information.
/// - Create an instance of a Syncbox engine and start it with the Syncbox object.
/// .
///
/// See how easy it is:
///
/// \code{.cs}
/// using Cloud;
/// using Cloud.Model;
///
///         // Main program
///         static void Main(string[] args)
///         {
///             CLCredential credential; // declare credential object
///             CLCredentialCreationStatus credentialStatus; // declare status enumeration
///             CLCredential.CreateAndInitialize( // creation returns a CLError which can be checked
///                     Key: "My key from the Cloud developer Dashboard",
///                     Secret: "My secret from the Cloud developer Dashboard",
///                     credential: out credential, // output the created credential object here
///                     status: out credentialStatus,  // output the status from creating credential
///                     Token: "My session token from the Cloud developer Dashboard"); // (optional)
///
///             // optionally check credentialStatus/returned CLError here before continuing
///            
///             // create the minimal settings using just the path to the folder
///             CLSyncSettings syncSettings = new CLSyncSettings(
///                 syncRoot: "<Full path of the folder to sync>",
///                 deviceId: "<device name unique in the Syncbox>");
///
///             CLSyncbox syncBox; // declare sync box
///             CLSyncboxCreationStatus syncBoxStatus; // declare status enumeration
///             CLSyncbox.CreateAndInitialize( // run the creation method for an existing sync box id (also returns CLError)
///                 Credential: credential, // created above
///                 SyncboxId: <id of Syncbox>, //The ID created for this Syncbox on the Cloud developer Dashboard
///                 syncBox: out syncBox, // output the created sync box here
///                 status: out syncBoxStatus, // output the status from creating sync box
///                 Settings: syncSettings); // live syncing requires a settings interface containing a SyncRoot (created above)
///
///             // optionally check syncBoxStatus/returned CLError here before continuing
///
///             // create the sync engine which will run live syncing
///             CLSyncEngine syncEngine = new CLSyncEngine();
///
///             // start the engine
///             CLSyncStartStatus startStatus; // declare status enumeration
///             syncEngine.Start( // starting sync returns a CLError which can be checked
///                 Syncbox: syncBox, // created above
///                 Status: out startStatus); // output the status from starting to sync
///
///             // optionally check startStatus/returned CLError here to see if it worked
///
///             // ...
///
///             // Stop syncing
///             syncEngine.Stop();
///
///             // ... Need to shutdown application
///
///             // Shutdown schedulers to immediately stop anything active like an upload or download
///             CLSyncEngine.Shutdown();
///         }
/// \endcode
///
/// The code above will automatically sync files in the "SyncRoot" directory with your other devices in this Syncbox, and with the Syncbox on Cloud.
///
/// \section install_sec SDK Installation
///
/// After installing the SDK you will have the following:
/// - A binary sample app that demonstrates syncing and sync status features, including support for badging Explorer files and folders with sync status icons.
/// - A Visual Studio 2012 project with the source code for the sample app.
/// - This documentation.
/// - Start menu items:
///   + Cloud.com
///     - Cloud
///       + Start Sample-Live-Sync: Starts the pre-built sample program which demonstrates the use of the API provided in the SDK.
///       + Show SDK Documentation: Launches your default browser to view this documentation.
///       + VS Sample-Live-Sync Solution: Launches Visual Studio with the sample app project.
///       + Uninstall Cloud SDK:  Uninstalls the SDK.
///       .
///     .
///   .
/// .
/// 
/// Install the SDK by following the steps below:
///
/// - Browse to the Cloud Dashboard page at https://dashboard.cloudstaging.us \internal https://dashboard.cliff.cloudburrito.com \endinternal.
/// - Click the Download tab and download the Windows CloudSDK-vx.x.x.zip installation program (which contains CloudSdkSetup.exe).
/// - Unzip the downloaded file and run the CloudSdkSetup.exe program.
/// - Follow the instructions to install the Cloud SDK.
/// .
///
/// \subsection install-directories-subsec Installation Directories
///
/// After installing the SDK you will see the following directory structure:
/// - C:\Program Files (x86)\Cloud.com
///   + CloudSDK: \n
/// This directory contains all of the files you will need to build a custom installation for your app.  You can elect to copy these files to your app installation directory (for a custom private installation), or you can elect to install these files to the GAC
/// and to centrally install the required SQL Server CE V4.0.  Download the SQL Server Compact Edition for a central installation here: http://www.microsoft.com/en-us/download/details.aspx?id=17876.
///   + Documentation: \n
/// This directory contains this SDK documentation.  Launch the file index.html in your browser.
///   + Sample Code: \n
/// This directory contains the sample code (prebuilt binaries and project source code).
///     - Live: \n
/// This directory contains sample code for the "Live Sync" sample.
///       + App: \n
/// This directory contains the pre-build binary version of the "Live Sync" sample (Sample-Live-Sync.exe and supporting modules).
///       + Project: \n
/// This directory contains the VS 2012 project files and source code to build the "Live Sync" sample app.
///       .
///     .
///   + Support: \n
/// This directory contains support files required for uninstalling Windows Cloud SDK.
///   .
///
/// \section sampleapp_sec Sample Application
/// The sample app (Sample-Live-Sync.exe) demonstrates the use of the SDK APIs.  It is a C# WPF application (.NET 4 Client Profile) designed using the Model-View-ViewModel (MVVM) pattern.  The sample app is provided in binary and source forms.
///
/// \subsection sampleapp-mainwindow-subsec Main Window
/// Run the sample app to see the main window below:
/// \image html SampleAppMainWindow.jpg "Sample App Main Window"
/// You will enter information into the following Required Settings fields:
/// - Syncbox Folder: This is the full path of the folder on your computer that will be synced.  The folder must be on a locally-attached drive.  Typically you will specify a folder in your user directory. You may use the Browse button to locate the folder to be synced.
/// - Key:  Paste this key from your Cloud developer DashBoard web page (https://dashboard.cloudstaging.us \internal https://dashboard.cliff.cloudburrito.com \endinternal).  This key uniquely identifies your application.
/// - Secret:  Paste this private key from your Cloud Developer DashBoard web page.  Note:  This is just for demonstration purposes.  You would normally access this private key from a secure location.
/// - Token:  Paste this session token from your Cloud Developer DashBoard web page.  Note:  This is just for demonstration purposes.  You would normally access this token from a secure location.
/// \note If the Token field is specified, then the Key, Secret and Token form a temporary session credential.  Otherwise, the Key and Secret form the permanent credential of your app.
/// - Syncbox ID: Paste this ID from your Cloud Developer DashBoard web page.  This is the unique identity of the Syncbox.  It represents a folder that will be synced across all of your devices, and to Cloud.
/// - Unique Device ID: Choose a unique name (within this Syncbox ID) for this device.  The name must not include any characters that are not allowed in a Windows folder name.  If multiple sync engines are running on this machine, then each engine's
/// pair of SyncboxId-DeviceId must be unique on the machine.  You may click the Generate button to generate a unique DeviceId that includes the computer name.
/// .
/// 
/// Buttons:
/// - Advanced Options: Click this button to see the advanced options dialog (described below).
/// - Save Settings:  Click this button to save the Required Settings and any Advanced Options you have set.  You can start syncing after valid settings have been saved. 
/// - Reset Sync:  Click this button to reset the persisted sync status.  The local sync status will be recreated via a full scan of the Syncbox folder.
/// - Install Badging: Click this button to install the badging Explorer shell extension (BadgeCom.dll).  This is discussed below.  Installation of the badging DLL involves stopping Explorer, registering BadgeCom.dll and restarting Explorer.  Clicking this button
/// multiple times will have no additional effect.  The installation of badging support is optional.
/// - Uninstall Badging:  Click this button to uninstall the badging shell extension dll.  Again, this involves stopping Explorer, unregistering BadgeCom.dll and restarting Explorer.  Clicking this button twice will result in an error message because the dll has
/// already been unregistered on the second attempt.
/// - Start Syncing: Click this button to start syncing the Syncbox folder.
/// - Stop Syncing: Click this button to stop syncing the Syncbox folder.
/// - Sync Status:  Click this button to see the sync status window (discussed below).
/// - Exit: Click this button to exit the sample app.  If syncing has been started, it will be stopped first.
/// .
/// \subsection sampleapp-advancedoptionsdialog-subsec Advanced Options
/// The Advanced Options dialog is displayed when you click the Advanced Options button on the main window:
/// \image html SampleAppAdvancedOptionsDialog.jpg "Sample App Advanced Options Dialog"
/// Enter the following information:
/// - Folder for Temporary Download Files: (Optional) This is the full path of a folder to be used to store files that are being actively downloaded.  When the download is complete, the files are moved to their permanent position in the Syncbox folder.
/// - Folder for Database File: (Optional) This is the full path of a folder to be used to store the sync database file.
/// - Badging Enabled: This is a checkbox that will enable or disable badging.  Badging must installed (main window) and enabled before badges will appear.
/// - Trace Folder: (Optional) This is the full path to store trace files.  There are several types of trace files stored there.  This field is required if Log Errors (below) is checked.
/// - Trace Type:  This is a bit mask (flagged enum) to control the sync trace output.  It is built from the following definition:
/// \code{.cs}
/// [Flags]
/// public enum TraceType : int
/// {
///     /// <summary>
///     /// No general trace (errors are handled separately)
///     /// </summary>
///     NotEnabled = 0x00,
///     /// <summary>
///     /// Communication tracing estimates the HTTP headers and body content during communication;
///     /// when used without the AddAuthorization flag, authorization parameters will be exluded such as authentication tokens or user/pass
///     /// </summary>
///     Communication = 0x01,
///     /// <summary>
///     /// AddAuthorization is only valid in conjunction with Communication (CommunicationIncludeAuthorization);
///     /// Adding this will cause authorization parameters to appear in communication trace such as authentication tokens or user/pass (in plain text!!!)
///     /// </summary>
///     AddAuthorization = 0x02,
///     /// <summary>
///     /// See flags Communication and AddAuthorization tags for this combination flag
///     /// </summary>
///     CommunicationIncludeAuthorization = 0x03,
///     /// <summary>
///     /// Logging the flow of FileChanges is extremely costly, use for development purposes only
///     /// </summary>
///     FileChangeFlow = 0x04
/// }
/// \endcode
/// - Trace Level:  This is a number to control the amount of functional tracing to be written.  Specify a number from 0 to 9.  0: no functional trace.  9: full functional trace.
/// - Log Errors: Check this box to generate a special trace file containing only sync errors.  The Trace Folder (above) is required if this box is checked.
/// .
/// Buttons:
/// - OK: Click this button to keep your changes to the Advanced Options.  The kept changes will not be persisted to disk until you click the Save Settings button on the main window.
/// - Cancel: Cancel any changes you made to the Advanced Options.
/// .
/// \subsection sampleapp-syncstatuswindow-subsec Sync Status Window
/// The Sync Status Window is displayed when you click the Sync Status button on the main window:
/// \image html SampleAppSyncStatusWindow.jpg "Sync Status Window"
/// This window has three areas.  The upload and download graphical status bars appear on the top, each with historical bandwidth display.  Sync supports up to six upload and six download threads.
/// If more than two upload or download threads are activated, a vertical scrollbar will appear.
///
/// The middle area presents the real-time summary sync statistics, and an icon that changes from Synced (check mark) to Syncing (animated syncing icon).
///
/// The sync messages appear on the bottom in a scrolling window.
///
/// The sync status window is instantiated when sync starts, and it remains hidden until activated by the main window Sync Status button.
///
/// Click the Done button to hide the sync status window.
/// \subsection sampleapp-badging-subsec Badging
/// The badging support works with the sync subsystem to paint small sync status icons over the Explorer file and folder icons.  It "badges" the Explorer icons.
/// 
/// There are three possible badges:
/// - Synced
/// - Syncing
/// - Error
/// .
///
/// See the example below:
/// \image html SampleAppBadgingExample.jpg "Explorer Sync Badges"
///
/// The badging support is provided by modules in Cloud.dll and in BadgeCom.dll.  Badging support will be activated if BadgeCom.dll is registered as a shell extension, and if Badging Enabled has been selected.  If badging is not enabled, syncing will occur normally.
///
/// Because BadgeCom.dll is a shell extension, it requires special installation support.  When installing this DLL, you must perform the following steps:
/// - Stop all Explorer processes
///		+ On a 64-bit platform
///			- Run "C:\Windows\System32\regsvr32.exe <installation path>\\CloudSdk\\amd64\\BadgeCom.dll"
///			- Run "C:\Windows\SysWow64\regsvr32.exe <installation path>\\CloudSdk\\x86\\BadgeCom.dll"
///			.
///		+ On a 32-bit platform
///			- Run "C:\Windows\SysWow64\regsvr32.exe <installation path>\\CloudSdk\\x86\\BadgeCom.dll"
///			.
///		.
/// - Restart Explorer
/// .
///
/// Uninstalling BadgeCom.dll involves the following steps:
/// - Stop all Explorer processes
///		+ On a 64-bit platform
///			- Run "C:\Windows\System32\regsvr32.exe /u <installation path>\\CloudSdk\\amd64\\BadgeCom.dll"
///			- Run "C:\Windows\SysWow64\regsvr32.exe /u <installation path>\\CloudSdk\\x86\\BadgeCom.dll"
///			.
///		+ On a 32-bit platform
///			- Run "C:\Windows\SysWow64\regsvr32.exe /u <installation path>\\CloudSdk\\x86\\BadgeCom.dll"
///			.
///		.
/// - Restart Explorer
/// .
///
/// BadgeCom.dll should be treated as a shared resource and you should consider not unregistering or deleting the file during the uninstall process.  Other developer's applications may have registered the same version of the file.
/// If you decide to delete the file,  
/// a problem may occur when you attempt the delete operation.  You may find that the file is still locked because other processes that use Explorer may have BadgeCom.dll loaded.
/// You can use Restart Manager (http://msdn.microsoft.com/en-us/magazine/cc163450.aspx) to request that the process unload BadgeCom.dll.  If that doesn't work, you can ask the user to close the process that has the file locked.  Failing that, you can kill
/// the process (with the user's permission).  Then the file can be deleted.  As a last resort, you could request the user to reboot the system.
/// \subsection sampleapp-startingsync-subsec Starting Sync
/// Here are the steps used to start sync.  Refer to MainViewModel:StartSyncing().
/// - Verify settings:  Sample code can be found in MainViewModel:SaveSettings().  If the settings are incorrect, the sync functions will return errors.
/// - Create an instance of CLCredential with your credential information.
/// - Create an instance of CLSyncbox with the path on disk to be synced, and with the instance of CLCredential.
/// - Create an instance of CLSyncEngine.
/// - Verify that the Syncbox folder or authorization information has not changed.  If it has, you should reset the sync database by calling \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.SyncReset SyncReset() \endlink or \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.WipeIndex WipeIndex() \endlink.
/// - Call \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.Start Start() \endlink to start syncing.  This function takes the sync settings and some additional optional parameters.
/// - Inspect the out parameter (\link Cloud.CLSyncStartStatus startStatus \endlink) which is an output of \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.Start Start() \endlink.  Handle an error if the output is not \link Cloud.CLSyncStartStatus CLSyncStartStatus \endlink.Success.
/// .
/// \subsection sampleapp-settings-subsec The Settings Interfaces
///The 5th parameter to CreateAndInitialize() is ICLSyncSettings.  That is an interface that has only a single property; the path of the Syncbox on the disk.  There are actually multiple Settings definitions that are related:
///             Cloud.Interfaces: public interface ICLSyncSettingsAdvanced : ICLSyncSettings, ICLAddTraceSettings
///
///You can pass any interface that is derived from ICLSyncSettings as the 5th parameter.  The sample app passes an implementation of ICLSyncSettingsAdvanced because it is demonstrating how to use ALL of the settings (ICLSettingsAdvanced (which includes ICLAddTraceSettings and ICLSyncSettings).
///
///In fact, you can pass a very simple parameter here if all you want to pass is the Syncbox path.  In that case, just pass “new CLSyncSettings(‘full path of the Syncbox’)”.
/// \subsection sampleapp-sessiontokenexpiration-subsec Session Token Expiration
/// A CLCredential may be created with an app key and secret, or with a session key, secret and temporary token.  All HTTP REST calls to the server check the credential.  Therefore, when using a temporary credential token, it is normal for any of the HTTP REST requests to fail with a
/// 401 NotAuthorized status.  When this occurs, the application must allocate a new temporary session key, secret and token via the server, and use that information to create a new CLCredential.
/// \code
/// CloudApiPublic.CLSyncEngine.GetEngineCurrentStatus can now be used to determine if the engine halted due to expired credentials:
///     public CLError GetEngineCurrentStatus(out CLSyncCurrentStatus status);
/// 
/// CloudApiPublic.Static.CLSyncCurrentState has a new flagged enumeration value (HaltedOnExpiredCredentials):
///     Idle
///     CommunicatingChanges
///     UploadingFiles
///     DownloadingFiles
///     HaltedOnConnectionFailure
///     HaltedOnExpiredCredentials
/// \endcode
/// 
/// Look for the HaltedOnExpiredCredentials flag.  Handling when this status is found should be as follows:
/// \par
/// If the enumeration has one and only one flag and that flag is HaltedOnExpiredCredentials then a client can stop the engine, grab a new credential from the server, and restart the engine with the new credential.
/// \par
/// However, if the enumeration also has an activity flag such as CommuncatingChanges, UploadingFiles, or DownloadingFiles, then the client should wait until a subsequent 
/// callback from the System.Threading.WaitCallback passed as optional input parameter StatusUpdated when the CloudApiPublic.CLSyncEngine was last started. The reason is because we do not wish to cancel a large file transfer in progress.
/// 
/// \subsection sampleapp-sqlceinstallation-subsec Installation Issues Involving SQL CE
/// When you write your own app using the SDK, you will need to provide an installer that will install the required SQL CE V4.0 along with your app.
///
///You can elect to install SQL CE in one of two ways: Central or Private.  See: http://msdn.microsoft.com/en-us/library/gg213826.aspx.
///
///When you install SQL CE centrally, you will run the full SQL CE installer (download here: http://www.microsoft.com/en-us/download/details.aspx?id=17876).  That installer will install the required DLLs in the GAC and register the SQL CE unmanaged DLLs so your app can find them on the target machine.
///
///You can also elect to install SQL CE using a Private installation.  In this case, your app installer must install the SQL CE DLLs in exactly the following structure (Microsoft's requirement).
/// \code{.cs}
///             Your installation directory
///                             YourApp.exe
///                             Your necessary DLLs.
///                             amd64
///                                             Microsoft.VC90.CRT
///                                                             Microsoft.VC90.CRT.manifest
///                                                             msvcr90.dll
///                                                             README_ENU.txt
///                                             sqlceca40.dll
///                                             sqlcecompact40.dll
///                                             sqlceer40EN.dll
///                                             sqlceme40.dll
///                                             sqlceqp40.dll
///                                             sqlcese40.dll
///                             x86
///                                             Microsoft.VC90.CRT
///                                                             Microsoft.VC90.CRT.manifest
///                                                             msvcr90.dll
///                                                             README_ENU.txt
///                                             sqlceca40.dll
///                                             sqlcecompact40.dll
///                                             sqlceer40EN.dll
///                                             sqlceme40.dll
///                                             sqlceqp40.dll
///                                             sqlcese40.dll
/// \endcode
///
///You will find the DLLs and the Microsoft.VC90.CRT folders in the structure above in the %ProgramFiles(x86)%\\Cloud.com\\CloudSDK\\amd64 and %ProgramFiles(x86)%\\Cloud.com\\CloudSDK\\x86 directories.
///Within a 32-bit operating system, %ProgramFiles(x86)% will not resolve, instead use %ProgramFiles%.
///Files within amd64 and x86 must be kept unique from one another.
///
///In addition to the DLLs required (above), your app also needs an app.config file like the following.  See the SampleApp\\app.config file.
/// \code{.cs}
///		<?xml version="1.0"?>
///		<configuration>
///		    <runtime>
///		        <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
///		            <dependentAssembly>
///		                <assemblyIdentity name="System.Data.SqlServerCe" publicKeyToken="89845dcd8080cc91" />
///		                <bindingRedirect oldVersion="4.0.0.0" newVersion="4.0.0.1" />
///		            </dependentAssembly>
///		        </assemblyBinding>
///		    </runtime>
///		</configuration>
/// \endcode
/// \subsection sampleapp-stoppingsync-subsec Stopping Sync
/// Here are the steps to stop sync.  Refer to MainViewModel:StopSyncing() in the sample app code.
/// - Close and dispose your sync status implementation.
/// - Call \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.Stop Stop() \endlink;
/// .
/// \subsection sampleapp-clerror-subsec The CLError Class
/// CLError is a class that represents an error, perhaps containing aggregated exceptions.  Most of the sync public methods return a CLError object.  If the returned object is null, no error occurred.  Otherwise you can
/// inspect this object for its contained error information.
///
/// CLError is a class with the following features:
/// - Stores one or more Exceptions.
/// - Each Exception may have an inner exception.
/// - Supports the tracing of the contained exceptions via LogErrors() in the sample app code.
/// - Adding an exception to CLError and logging it:
/// \code{.cs}
/// CLError error = null;
/// try
/// {
///     ...
/// }
/// catch (Exception ex)
/// {
///     error += ex;
///     error.LogErrors(_syncSettings.TraceLocation, _syncSettings.LogErrors);
///     ...
/// }
/// \endcode
/// .
/// \subsection sampleapp-eventmessagereceiver-subsec The EventMessageReceiver Class
/// \link SampleLiveSync.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink is the sample app's implementation of \link Cloud.Interfaces.IEventMessageReceiver Cloud.Interfaces.IEventMessageReceiver \endlink to aggregate status information.
/// It is used as one of the ViewModels for your sync status view.
/// You can bind to any of the following ObservableCollections:
/// - ListFilesDownloading
/// - ListFilesUploading
/// - ListMessages
/// .\n
/// An IEventMessageReceiver implementation requires subscribing in \link Cloud.Static.MessageEvents Cloud.Static.MessageEvents \endlink for each Syncbox\DeviceId combination.
/// Also, you may unsubscribe when you no longer which to receive event callbacks.
///
/// The ListFilesDownloading and ListFilesUploading collections expose the following properties:
/// \code{.cs}
/// public interface ICLStatusFileTransfer
/// {
///     /// <summary>
///     /// Relative path to the transferring file from the sync root folder
///     /// </summary>
///     string SyncRelativePath { get; }
///     /// <summary>
///     /// Whether this file transfer status should be visible (visible for actual transfers and not visible for blank placeholders)
///     /// </summary>
///     Visibility Visibility { get; }
///     /// <summary>
///     /// Number from 0 to 1 for the current transfer rate out of historical maximum or twice the starting rate (whichever is greater)
///     /// </summary>
///     Double DisplayRateAtCurrentSample { get; }
///     /// <summary>
///     /// A WPF Control for display of the rate history for the current transfer
///     /// </summary>
///     RateGraph StatusGraph { get; }
///     /// <summary>
///     /// The percentage completeness of transfer
///     /// </summary>
///     Double PercentComplete { get; }
///     /// <summary>
///     /// String for display of total transfer size in appropriate scale representation of bytes (i.e. "X bytes" or "X.Y KB" or "X.Y MB" or "X.Y GB"...)
///     /// </summary>
///     string DisplayFileSize { get; }
///     /// <summary>
///     /// Estimated time remaining for transfer completion
///     /// </summary>
///     string DisplayTimeLeft { get; }
///     /// <summary>
///     /// Total time already elapsed since the transfer start
///     /// </summary>
///     string DisplayElapsedTime { get; }
/// }
/// \endcode
///
/// ListMessages items expose the MessageText property (string).\n
/// Also, EventMessageReceiver has bindable properties for implementing Growl messages in Windows, but that UI functionality is not provided in the sample app.
/// \subsection sampleapp-syncstatusView-subsec The SyncStatusView Class
/// The Sync Status View window is the sample app's implementation of a class to view the status information.
/// Status information is produced by the sample app's implementation of \link Cloud.Interfaces.IEventMessageReceiver Cloud.Interfaces.IEventMessageReceiver \endlink,
/// \link SampleLiveSync.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink. Yours may be very different.
///
/// The following information is produced by your message receiver for possible consumption by your sync status viewer:
/// - List of files currently uploading (ObservableCollection)
/// - List of files currently downloading (ObservableCollection)
/// - List of messages (ObservableCollection)
/// - Overall sync status information
/// - Individual sync change events
/// .
/// The sample app SyncStatusView does not handle the individual sync change events.  Those events are described below in Sync Change Events.
///
/// The SyncStatusView object uses two ViewModels (EventMessageReceiver for binding to the ObservableCollections of data, and SyncStatusViewModel to handle the UI ICommand button actions and aggregate additional summary information).
///
/// This view is instantiated at \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.Start Start() \endlink by the sample app, and it runs until \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.Stop Stop() \endlink.  Buttons simply show and hide the window.
/// Your view can instantiate and dispose your view (and the related EventMessageReceiver ViewModel) at any time, but the data collection will not begin until you instantiate the class.
/// \subsection sampleapp-summarystatus-subsec Overall Summary Sync Status
/// Two of the optional parameters on the \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.Start Start() \endlink function (StatusUpdated and StatusUpdatedUserState) can be used to receive a callback when overall sync summary status has changed.
/// 
/// StatusUpdated represents your callback function that will be driven each time sync status changes.
///
/// StatusUpdatedUserState is your own object representing user state information to be passed to the StatusUpdated callback function.
///
/// When the StatusUpdated callback is called by the engine, you can call \link Cloud.CLSyncEngine _syncEngine\endlink.\link Cloud.CLSyncEngine.GetEngineCurrentStatus GetEngineCurrentStatus() \endlink to get the current sync summary status.
/// You need to aggregate this information for display.
/// See \link SampleLiveSync.SyncStatusViewModel.OnSyncStatusUpdated SyncStatusViewModel.OnSyncStatusUpdated() \endlink.
/// \subsection sampleapp-syncchangeevents-subsec Sync Change Events
/// Sync change events can be used to track real-time progress.  They are described in class \link Cloud.Static.MessageEvents Cloud.Static.MessageEvents \endlink.
/// \link Cloud.Static.MessageEvents Cloud.Static.MessageEvents \endlink exposes the following events:
/// - public static event EventHandler<EventMessageArgs> NewEventMessage:
/// This event is fired every time a new EventMessage is received.  EventMessages are also placed in the EventMessageReceiver.ListMessages ObservableCollection.  The EventMessageArgs passed with each received message includes the message itself (string), 
/// the event message level (importance) and a flag to indicate that the message is an error.
/// - public static event EventHandler<SetCountArgs> DownloadingCountSet:
/// This event is fired each time a new file download is started.  The SetCountArgs passed with each received message includes the new count of downloading files.
/// - public static event EventHandler<SetCountArgs> UploadingCountSet:
/// This event is fired each time a new file upload is started.  The SetCountArgs passed with each received message includes the new count of uploading files.
/// - public static event EventHandler<IncrementCountArgs> DownloadedCountIncremented:
/// This event is fired each time one or more files complete the download process.  The IncrementCountArgs passed with each received message includes the number of files that completed download.
/// - public static event EventHandler<IncrementCountArgs> UploadedCountIncremented:
/// This event is fired each time one or more files complete the upload process.  The IncrementCountArgs passed with each received message includes the number of files that completed upload.
/// - public static event EventHandler<TransferUpdateArgs> FileDownloadUpdated:
/// This event is fired each time the transfer status changes for a file being downloaded.  The TransferUpdateArgs passed with each received message includes a unique ID if the file transfer, and the current real-time status of the transfer.
/// - public static event EventHandler<TransferUpdateArgs> FileUploadUpdated:
/// This event is fired each time the transfer status changes for a file being uploaded.  The TransferUpdateArgs passed with each received message includes a unique ID if the file transfer, and the current real-time status of the transfer.
/// .
/// A lot of the information provided by the events above has been aggregated into a new aggregated event handler (MessageEvents.NewEventMessage).  Callbacks to this event handler are passed EventMessageArgs.  EventMessageArgs.Message.Type indicates
/// the type of the message (EventMessageType.Error, Informational, UploadingCountChanged, DownloadingCountChanged, UploadProgress, DownloadProgress, SuccessfulUploadsIncremented, and SuccesfulDownloadsIncremented).  Depending on the
/// type, each of the messages is cast to a particular type of message that contains specific information about that message.  For example, The ErrorMessage type contains an ErrorInfo.ErrorType that can be used in a switch to handle
/// specific types of errors.  See the code in the sample app MainViewModel.cs:MessageEvents_NewEventMessage().
///
/// \section copyright_sec Copyright (C) Cloud.com.  All Rights Reserved.
/// http://www.cloud.com
///
/// \namespace Cloud
/// \brief Contains all public API functions of Cloud for Windows XP through Windows 8. See detailed description.
///
/// Primary components:\n
/// \link Cloud.CLCredential CLCredential \endlink stores authentication information for all communication and services.\n
/// \link Cloud.CLSyncbox CLSyncbox \endlink represents a Syncbox in Cloud where everything is stored.\n
/// \link Cloud.CLSyncEngine CLSyncEngine \endlink performs active sync of files and folders within a specified path to a syncbox in Cloud.\n
/// \internal \link Cloud.PushNotification.CLNotification PushNotification.CLNotification \endlink allows manual subscription to push notifications and is used internally by \link Cloud.CLSync CLSync \endlink.\n \endinternal
/// \internal \link Cloud.REST.CLHttpRest REST.CLHttpRest \endlink allows manual access to Cloud communication methods for file\folder queries, posting changes, and file transfer. It is used internally by \link Cloud.CLSync CLSync \endlink.\n \endinternal
/// \link Cloud.Support.CLTrace Support.CLTrace \endlink writes a message to log from a required format string and any object parameter arguments. It is used conditionally by other public API classes when instantiated with advanced settings for trace.
///
/// \namespace Cloud.EventMessageReceiver
/// \brief Contains the \link Cloud.EventMessageReceiver.EventMessageReceiver EventMessageReceiver \endlink which acts as a view model for status changes such as growls and sync status messages. It also exposes events for messages and status changes.
///
/// \namespace Cloud.Interfaces
/// \brief Contains interfaces required as inputs for various public API functions.
///
/// \internal
/// \namespace Cloud.JsonContracts
/// \brief Contains deserialized request or response objects for HTTP REST communication to Cloud.
/// \endinternal
///
/// \namespace Cloud.Model
/// \brief Contains various objects exposed through public API functions.
///
/// \namespace Cloud.PushNotification
/// \brief Contains notification event arguments \internal and the \link Cloud.PushNotification.CLNotification CLNotification \endlink which allows manual subscription to push notifications. \endinternal
///
/// \internal
/// \namespace Cloud.REST
/// \brief Contains the \link Cloud.REST.CLHttpRest CLHttpRest \endlink which allows manual access to Cloud communication methods for file\folder queries, posting changes, and file transfer.
/// \endinternal
///
/// \namespace Cloud.Static
/// \brief Contains various static helper classes such as \link Cloud.Static.Helpers Helpers \endlink
///
/// \namespace Cloud.Support
/// \brief Contains the \link Cloud.Support.CLTrace CLTrace \endlink which writes a message to log from a required format string and any object parameter arguments.
///
/// \namespace CloudSamples
/// \brief Contains sample code which implements \link Cloud Cloud \endlink library and uses it to allow single folder active sync; it also can display status changes.
///
/// \link CloudSamples.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink acts as a view model for status changes such as growls and sync status messages. It also exposes events for messages and status changes. \link Cloud.CLSyncEngine  Cloud.CLSyncEngine \endlink fires event callbacks upon changes.\n
///
