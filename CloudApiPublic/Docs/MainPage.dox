/// \mainpage SyncBoxes made easy!
///
/// \section intro_sec Introduction
///
/// The Cloud Windows Client SDK allows your application to easily support real time file synchronization services.
///
/// A SyncBox can be thought of as a folder with a hierarchical directory structure.  Any files placed in a SyncBox can be automatically
/// synced to the same SyncBox on all of your other devices (Windows, Mac, iOS and Android).
///
/// An application can have a SyncBox which can have multiple devices. The ID of a device should be unique within a particular SyncBox.
/// A physical computer (e.g., a local Windows Machine) may have multiple SyncBoxes running under multiple applications in different or possibly overlapping local directories.
///
/// In desktop environments, a SyncBox is tied to a particular local disk directory.  e.g., on Windows, "C:\Users\<UserName>\<YourSyncBoxName>".
///
/// To begin syncing, you will need to:     
/// - Specify your credential.
/// - Specify the path to be synced.
/// - Create a SyncBox object with the above information.
/// - Create an instance of a SyncBox engine and start it with the SyncBox object.
/// .
///
/// See how easy it is:
///
/// \code{.cs}
/// using CloudApiPublic;
/// using CloudApiPublic.Model;
///
///         // Main program
///         static void Main(string[] args)
///         {
///             CLCredential credential; // declare credential object
///             CLCredentialCreationStatus credentialStatus; // declare status enumeration
///             CLCredential.CreateAndInitialize( // creation returns a CLError which can be checked
///                     Key: "My application key from the Cloud developer Dashboard",
///                     Secret: "My application secret from the Cloud developer Dashboard",
///                     credential: out credential, // output the created credential object here
///                     status: out credentialStatus); // output the status from creating credential
///
///             // optionally check credentialStatus/returned CLError here before continuing
///            
///             // create the minimal settings using just the path to the folder
///             CLSyncSettings syncSettings = new CLSyncSettings(
///                 syncRoot: "<Full path of the folder to sync>");
///
///             CLSyncBox syncBox; // declare sync box
///             CLSyncBoxCreationStatus syncBoxStatus; // declare status enumeration
///             CLSyncBox.CreateAndInitialize( // run the creation method for an existing sync box id (also returns CLError)
///                 Credential: credential, // created above
///                 SyncBoxId: <id of SyncBox>, //The ID created for this SyncBox on the Cloud developer Dashboard
///                 syncBox: out syncBox, // output the created sync box here
///                 status: out syncBoxStatus, // output the status from creating sync box
///                 Settings: syncSettings); // live syncing requires a settings interface containing a SyncRoot (created above)
///
///             // optionally check syncBoxStatus/returned CLError here before continuing
///
///             // create the sync engine which will run live syncing
///             CLSyncEngine syncEngine = new CLSyncEngine();
///
///             // start the engine
///             CLSyncStartStatus startStatus; // declare status enumeration
///             syncEngine.Start( // starting sync returns a CLError which can be checked
///                 SyncBox: syncBox, // created above
///                 Status: out startStatus); // output the status from starting to sync
///
///             // optionally check startStatus/returned CLError here to see if it worked
///
///             // ...
///
///             // Stop syncing
///             syncEngine.Stop();
///
///             // ... Need to shutdown application
///
///             // Shutdown schedulers to immediately stop anything active like an upload or download
///             CLSyncEngine.Shutdown();
///         }
/// \endcode
///
/// The code above will automatically sync files in the "SyncRoot" directory with your other devices in this SyncBox, and with the SyncBox on Cloud.
///
/// \section install_sec SDK Installation
///
/// After installing the SDK you will have the following:
/// - A binary sample app that demonstrates syncing and sync status features, including support for badging Explorer files and folders with sync status icons.
/// - A Visual Studio 2012 project with the source code for the sample app.
/// - This documentation.
/// - Start menu items:
///   + Cloud.com
///     - Cloud
///       + Start CloudSdkSyncSample: Starts the pre-built sample program which demonstrates the use of the API provided in the SDK.
///       + Show SDK Documentation: Launches your default browser to view this documentation.
///       + Uninstall Cloud SDK:  Uninstalls the SDK.
///       + VS CloudSdkSyncSample Solution: Launches Visual Studio with the sample app project.
///       .
///     .
///   .
/// .
/// 
/// Install the SDK by following the steps below:
///
/// - Browse to the Cloud download page at https://dashboard.cloudstaging.us \internal https://dashboard.cliff.cloudburrito.com \endinternal.
/// - Create a developer account and login.
/// - Click the Download link and download the Windows Cloud SDK installation program CloudSdkSetup.exe.
/// - Follow the instructions to install the Cloud SDK.
/// .
///
/// \section sampleapp_sec Sample Application
/// The sample app (CloudSdkSyncSample.exe) demonstrates the use of the SDK APIs.  It is a C# WPF application (.NET 4 Client Profile) designed using the Model-View-ViewModel (MVVM) pattern.  The sample app is provided in binary and source forms.
///
/// \subsection sampleapp-mainwindow-subsec Main Window
/// Run the sample app to see the main window below:
/// \image html SampleAppMainWindow.jpg "Sample App Main Window"
/// You will enter information into the following Required Settings fields:
/// - SyncBoxFolder: This is the full path of the folder on your computer that will be synced.  The folder must be on a locally-attached drive.  Typically you will specify a folder in your user directory. You may use the Browse button to locate the folder to be synced.
/// - Application Key:  Paste this key from your Cloud developer DashBoard web page (https://dashboard.cloudstaging.us \internal https://dashboard.cliff.cloudburrito.com \endinternal).  This key uniquely identifies your application.
/// - Application Secret:  Paste this private key from your Cloud Developer DashBoard web page.  Note:  This is just for demonstration purposes.  You would normally access this private key from a secure location.
/// - SyncBox ID: Paste this ID from your Cloud Developer DashBoard web page.  This is the unique identity of the SyncBox.  It represents a folder that will be synced across all of your devices, and to Cloud.
/// - (Optional) Unique Device ID: Choose a unique name (within this SyncBox ID) for this device.  The name must not include any characters that are not allowed in a Windows folder name.  If you do not specify the device ID, it will default to a unique ID.
/// .
/// 
/// Buttons:
/// - Advanced Options: Click this button to see the advanced options dialog (described below).
/// - Save Settings:  Click this button to save the Required Settings and any Advanced Options you have set.  You can start syncing after valid settings have been saved. 
/// - Install Badging: Click this button to install the badging Explorer shell extension (BadgeCom.dll).  This is discussed below.  Installation of the badging DLL involves stopping Explorer, registering BadgeCom.dll and restarting Explorer.  Clicking this button
/// multiple times will have no additional effect.  The installation of badging support is optional.
/// - Uninstall Badging:  Click this button to uninstall the badging shell extension dll.  Again, this involves stopping Explorer, unregistering BadgeCom.dll and restarting Explorer.  Clicking this button twice will result in an error message because the dll has
/// already been unregistered on the second attempt.
/// - Start Syncing: Click this button to start syncing the SyncBox folder.
/// - Stop Syncing: Click this button to stop syncing the SyncBox folder.
/// - Sync Status:  Click this button to see the sync status window (discussed below).
/// - Exit: Click this button to exit the sample app.  If syncing has been started, it will be stopped first.
/// .
/// \subsection sampleapp-advancedoptionsdialog-subsec Advanced Options
/// The Advanced Options dialog is displayed when you click the Advanced Options button on the main window:
/// \image html SampleAppAdvancedOptionsDialog.jpg "Sample App Advanced Options Dialog"
/// Enter the following information:
/// - Folder for Temporary Download Files: (Optional) This is the full path of a folder to be used to store files that are being actively downloaded.  When the download is complete, the files are moved to their permanent position in the SyncBox folder.
/// - Folder for Database File: (Optional) This is the full path of a folder to be used to store the sync database file.
/// - Trace Folder: (Optional) This is the full path to store trace files.  There are several types of trace files stored there.  This field is required if Log Errors (below) is checked.
/// - Trace Type:  This is a bit mask (flagged enum) to control the sync trace output.  It is built from the following definition:
/// \code{.cs}
/// [Flags]
/// public enum TraceType : int
/// {
///     /// <summary>
///     /// No general trace (errors are handled seperately)
///     /// </summary>
///     NotEnabled = 0x00,
///     /// <summary>
///     /// Communication tracing estimates the HTTP headers and body content during communication;
///     /// when used without the AddAuthorization flag, authorization parameters will be exluded such as authentication tokens or user/pass
///     /// </summary>
///     Communication = 0x01,
///     /// <summary>
///     /// AddAuthorization is only valid in conjunction with Communication (CommunicationIncludeAuthorization);
///     /// Adding this will cause authorization parameters to appear in communication trace such as authentication tokens or user/pass (in plain text!!!)
///     /// </summary>
///     AddAuthorization = 0x02,
///     /// <summary>
///     /// See flags Communication and AddAuthorization tags for this combination flag
///     /// </summary>
///     CommunicationIncludeAuthorization = 0x03,
///     /// <summary>
///     /// Logging the flow of FileChanges is extremely costly, use for development purposes only
///     /// </summary>
///     FileChangeFlow = 0x04
/// }
/// \endcode
/// - Trace Level:  This is a number to control the amount of functional tracing to be written.  Specify a number from 0 to 9.  0: no functional trace.  9: full functional trace.
/// - Log Errors: Check this box to generate a special trace file containing only sync errors.  The Trace Folder (above) is required if this box is checked.
/// .
/// Buttons:
/// - OK: Click this button to keep your changes to the Advanced Options.  The kept changes will not be persisted to disk until you click the Save Settings button on the main window.
/// - Cancel: Cancel any changes you made to the Advanced Options.
/// .
/// \subsection sampleapp-syncstatuswindow-subsec Sync Status Window
/// The Sync Status Window is displayed when you click the Sync Status button on the main window:
/// \image html SampleAppSyncStatusWindow.jpg "Sync Status Window"
/// This window has three areas.  The upload and download graphical status bars appear on the top, each with historical bandwidth display.  Sync supports up to six upload and six download threads, but your local group policy may limit the number to two each.
/// If more than two upload or download threads are activated, a vertical scrollbar will appear.
///
/// The middle area presents the real-time summary sync statistics, and an icon that changes from Synced (check mark) to Syncing (animated syncing icon).
///
/// The sync messages appear on the bottom in a scrolling window.
///
/// The sync status window is instantiated when sync starts, and it remains hidden until activated by the main window Sync Status button.
///
/// Click the Done button to hide the sync status window.
/// \subsection sampleapp-badging-subsec Badging
/// The badging support works with the sync subsystem to paint small sync status icons over the Explorer file and folder icons.  It "badges" the Explorer icons.
/// 
/// There are three possible badges:
/// - Synced
/// - Syncing
/// - Error
/// .
///
/// See the example below:
/// \image html SampleAppBadgingExample.jpg "Explorer Sync Badges"
///
/// The badging support is provided by modules in CloudApiPublic.dll and in BadgeCom.dll.  Badging support will be activated if BadgeCom.dll is registered as a shell extension.  If not, syncing will occur normally.
///
/// Because BadgeCom.dll is a shell extension, it requires special installation support.  When installing this DLL, you must perform the following steps:
/// - Stop all Explorer processes
/// - Run "regsvr32 <installation path>\BadgeCom.dll"
/// - Restart Explorer
/// .
///
/// Uninstalling BadgeCom.dll involves the following steps:
/// - Stop all Explorer processes
/// - Run "regsvr32 /u <installation path>\BadgeCom.dll"
/// - Restart Explorer
/// - Delete the file BadgeCom.dll
/// .
///
/// A problem may occur when you attempt to delete the BadgeCom.dll file in the last step above.  You may find that the file is still locked because other processes that use Explorer may have BadgeCom.dll loaded.
/// You can use Restart Manager (http://msdn.microsoft.com/en-us/magazine/cc163450.aspx) to request that the process unload BadgeCom.dll.  If that doesn't work, you can ask the user to close the process that has the file locked.  Failing that, you can kill
/// the process (with the user's permission).  Then the file can be deleted.
/// \subsection sampleapp-startingsync-subsec Starting Sync
/// Here are the steps used to start sync.  Refer to MainViewModel:StartSyncing().
/// - Verify settings:  Sample code can be found in MainViewModel:SaveSettings().  If the settings are incorrect, the sync functions will return errors.
/// - Create an instance of CLCredential with your credential information.
/// - Create an instance of CLSyncBox with the path on disk to be synced, and with the instance of CLCredential.
/// - Create an instance of CLSyncEngine.
/// - Verify that the SyncBox folder or authorization information has not changed.  If it has, you should reset the sync database by calling \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.SyncReset SyncReset() \endlink or \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.WipeIndex WipeIndex() \endlink.
/// - Call \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.Start Start() \endlink to start syncing.  This function takes the sync settings and some additional optional parameters.
/// - Inspect the out parameter (\link CloudApiPublic.CLSyncStartStatus startStatus \endlink) which is an output of \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.Start Start() \endlink.  Handle an error if the output is not \link CloudApiPublic.CLSyncStartStatus CLSyncStartStatus \endlink.Success.
/// .
/// \subsection sampleapp-settings-subsec The Settings Interfaces
///The 5th parameter to CreateAndInitialize() is ICLSyncSettings.  That is an interface that has only a single property; the path of the SyncBox on the disk.  There are actually multiple Settings definitions that are related:
///             CloudApiPublic.Interfaces: public interface ICLSyncSettingsAdvanced : ICLSyncSettings, ICLAddTraceSettings
///
///You can pass any interface that is derived from ICLSyncSettings as the 5th parameter.  The sample app passes an implementation of ICLSyncSettingsAdvanced because it is demonstrating how to use ALL of the settings (ICLSettingsAdvanced (which includes ICLAddTraceSettings and ICLSyncSettings).
///
///In fact, you can pass a very simple parameter here if all you want to pass is the SyncBox path.  In that case, just pass “new CLSyncSettings(‘full path of the SyncBox’)”.
/// \subsection sampleapp-sqlceinstallation-subsec Installation Issues Involving SQL CE
/// When you write your own app using the SDK, you will need to install the SQL CE support DLLs in a particular way.
///
///The provided sample app VS2012 project in the SampleApp directory has been tested with all of the following: XpSp3X86, XpSp3X64, VistaX86, VistaX64, Win7X86, Win7X64, Win8X86 and Win8X64, including the SQL CE support.  See the SampleApp directory for an example of the requirement discussed below.
///
///Your app installer must install the SQL CE DLLs in exactly the following structure (Microsoft's requirement).
/// \code{.cs}
///             Your installation directory
///                             YourApp.exe
///                             Your necessary DLLs.
///                             amd64
///                                             Microsoft.VC90.CRT
///                                                             Microsoft.VC90.CRT.manifest
///                                                             msvcr90.dll
///                                                             README_ENU.txt
///                                             sqlceca40.dll
///                                             sqlcecompact40.dll
///                                             sqlceer40EN.dll
///                                             sqlceme40.dll
///                                             sqlceqp40.dll
///                                             sqlcese40.dll
///                             x86
///                                             Microsoft.VC90.CRT
///                                                             Microsoft.VC90.CRT.manifest
///                                                             msvcr90.dll
///                                                             README_ENU.txt
///                                             sqlceca40.dll
///                                             sqlcecompact40.dll
///                                             sqlceer40EN.dll
///                                             sqlceme40.dll
///                                             sqlceqp40.dll
///                                             sqlcese40.dll
/// \endcode
///
///You will find the DLLs in the structure above in the SampleApp\\bin\\debug and SampleApp\\bin\\release directories.
///
///In addition to the DLLs required (above), your app also needs an app.config file like the following.  See the SampleApp\\app.config file.
/// \code{.cs}
///     </configuration>
///             <runtime>
///                     <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
///                            <dependentAssembly>
///                                    <assemblyIdentity name="System.Data.SqlServerCe" publicKeyToken="89845dcd8080cc91" culture="neutral"/>
///                                    <bindingRedirect oldVersion="4.0.0.0-4.0.0.1" newVersion="4.0.0.1"/>
///                            </dependentAssembly>
///                    </assemblyBinding>
///             </runtime>
///             <system.data>
///                    <DbProviderFactories>
///                            <remove invariant="System.Data.SqlServerCe.4.0"/>
///                            <add name="Microsoft SQL Server Compact Data Provider 4.0" invariant="System.Data.SqlServerCe.4.0" description=".NET Framework Data Provider for Microsoft SQL Server Compact" type="System.Data.SqlServerCe.SqlCeProviderFactory,
///                                   System.Data.SqlServerCe, Version=4.0.0.1, Culture=neutral, PublicKeyToken=89845dcd8080cc91"/>
///                    </DbProviderFactories>
///             </system.data>
///     </configuration>
/// \endcode
/// \subsection sampleapp-stoppingsync-subsec Stopping Sync
/// Here are the steps to stop sync.  Refer to MainViewModel:StopSyncing() in the sample app code.
/// - Close and dispose your sync status implementation.
/// - Call \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.Stop Stop() \endlink;
/// .
/// \subsection sampleapp-clerror-subsec The CLError Class
/// CLError is a class that represents an error, perhaps containing aggregated exceptions.  Most of the sync public methods return a CLError object.  If the returned object is null, no error occurred.  Otherwise you can
/// inspect this object for its contained error information.
///
/// CLError is a class with the following features:
/// - Stores one or more Exceptions.
/// - Each Exception may have an inner exception.
/// - Supports the tracing of the contained exceptions via LogErrors() in the sample app code.
/// - Adding an exception to CLError and logging it:
/// \code{.cs}
/// CLError error = null;
/// try
/// {
///     ...
/// }
/// catch (Exception ex)
/// {
///     error += ex;
///     error.LogErrors(_syncSettings.TraceLocation, _syncSettings.LogErrors);
///     ...
/// }
/// \endcode
/// .
/// \subsection sampleapp-eventmessagereceiver-subsec The EventMessageReceiver Class
/// \link CloudSdkSyncSample.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink is the sample app's implementation of \link CloudApiPublic.Interfaces.IEventMessageReceiver CloudApiPublic.Interfaces.IEventMessageReceiver \endlink to aggregate status information.
/// It is used as one of the ViewModels for your sync status view.
/// You can bind to any of the following ObservableCollections:
/// - ListFilesDownloading
/// - ListFilesUploading
/// - ListMessages
/// .\n
/// An IEventMessageReceiver implementation requires subscribing in \link CloudApiPublic.Static.MessageEvents CloudApiPublic.Static.MessageEvents \endlink for each SyncBox\Device combination.
/// Also, you may unsubscribe when you no longer which to receive event callbacks.
///
/// The ListFilesDownloading and ListFilesUploading collections expose the following properties:
/// \code{.cs}
/// public interface ICLStatusFileTransfer
/// {
///     /// <summary>
///     /// Relative path to the transferring file from the sync root folder
///     /// </summary>
///     string SyncRelativePath { get; }
///     /// <summary>
///     /// Whether this file transfer status should be visible (visible for actual transfers and not visible for blank placeholders)
///     /// </summary>
///     Visibility Visibility { get; }
///     /// <summary>
///     /// Number from 0 to 1 for the current transfer rate out of historical maximum or twice the starting rate (whichever is greater)
///     /// </summary>
///     Double DisplayRateAtCurrentSample { get; }
///     /// <summary>
///     /// A WPF Control for display of the rate history for the current transfer
///     /// </summary>
///     RateGraph StatusGraph { get; }
///     /// <summary>
///     /// The percentage completeness of transfer
///     /// </summary>
///     Double PercentComplete { get; }
///     /// <summary>
///     /// String for display of total transfer size in appropriate scale representation of bytes (i.e. "X bytes" or "X.Y KB" or "X.Y MB" or "X.Y GB"...)
///     /// </summary>
///     string DisplayFileSize { get; }
///     /// <summary>
///     /// Estimated time remaining for transfer completion
///     /// </summary>
///     string DisplayTimeLeft { get; }
///     /// <summary>
///     /// Total time already elapsed since the transfer start
///     /// </summary>
///     string DisplayElapsedTime { get; }
/// }
/// \endcode
///
/// ListMessages items expose the MessageText property (string).\n
/// Also, EventMessageReceiver has bindable properties for implementing Growl messages in Windows, but that UI functionality is not provided in the sample app.
/// \subsection sampleapp-syncstatusView-subsec The SyncStatusView Class
/// The Sync Status View window is the sample app's implementation of a class to view the status information.
/// Status information is produced by the sample app's implementation of \link CloudApiPublic.Interfaces.IEventMessageReceiver CloudApiPublic.Interfaces.IEventMessageReceiver \endlink,
/// \link CloudSdkSyncSample.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink. Yours may be very different.
///
/// The following information is produced by your message receiver for possible consumption by your sync status viewer:
/// - List of files currently uploading (ObservableCollection)
/// - List of files currently downloading (ObservableCollection)
/// - List of messages (ObservableCollection)
/// - Overall sync status information
/// - Individual sync change events
/// .
/// The sample app SyncStatusView does not handle the individual sync change events.  Those events are described below in Sync Change Events.
///
/// The SyncStatusView object uses two ViewModels (EventMessageReceiver for binding to the ObservableCollections of data, and SyncStatusViewModel to handle the UI ICommand button actions and aggregate additional summary information).
///
/// This view is instantiated at \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.Start Start() \endlink by the sample app, and it runs until \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.Stop Stop() \endlink.  Buttons simply show and hide the window.
/// Your view can instantiate and dispose your view (and the related EventMessageReceiver ViewModel) at any time, but the data collection will not begin until you instantiate the class.
/// \subsection sampleapp-summarystatus-subsec Overall Summary Sync Status
/// Two of the optional parameters on the \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.Start Start() \endlink function (StatusUpdated and StatusUpdatedUserState) can be used to receive a callback when overall sync summary status has changed.
/// 
/// StatusUpdated represents your callback function that will be driven each time sync status changes.
///
/// StatusUpdatedUserState is your own object representing user state information to be passed to the StatusUpdated callback function.
///
/// When the StatusUpdated callback is called by the engine, you can call \link CloudApiPublic.CLSyncEngine _syncEngine\endlink.\link CloudApiPublic.CLSyncEngine.GetEngineCurrentStatus GetEngineCurrentStatus() \endlink to get the current sync summary status.
/// You need to aggregate this information for display.
/// See \link CloudSdkSyncSample.SyncStatusViewModel.OnSyncStatusUpdated SyncStatusViewModel.OnSyncStatusUpdated() \endlink.
/// \subsection sampleapp-syncchangeevents-subsec Sync Change Events
/// Sync change events can be used to track real-time progress.  They are described in class \link CloudApiPublic.Static.MessageEvents CloudApiPublic.Static.MessageEvents \endlink.
/// \link CloudApiPublic.Static.MessageEvents CloudApiPublic.Static.MessageEvents \endlink exposes the following events:
/// - public static event EventHandler<EventMessageArgs> NewEventMessage:
/// This event is fired every time a new EventMessage is received.  EventMessages are also placed in the EventMessageReceiver.ListMessages ObservableCollection.  The EventMessageArgs passed with each received message includes the message itself (string), 
/// the event message level (importance) and a flag to indicate that the message is an error.
/// - public static event EventHandler<SetCountArgs> DownloadingCountSet:
/// This event is fired each time a new file download is started.  The SetCountArgs passed with each received message includes the new count of downloading files.
/// - public static event EventHandler<SetCountArgs> UploadingCountSet:
/// This event is fired each time a new file upload is started.  The SetCountArgs passed with each received message includes the new count of uploading files.
/// - public static event EventHandler<IncrementCountArgs> DownloadedCountIncremented:
/// This event is fired each time one or more files complete the download process.  The IncrementCountArgs passed with each received message includes the number of files that completed download.
/// - public static event EventHandler<IncrementCountArgs> UploadedCountIncremented:
/// This event is fired each time one or more files complete the upload process.  The IncrementCountArgs passed with each received message includes the number of files that completed upload.
/// - public static event EventHandler<TransferUpdateArgs> FileDownloadUpdated:
/// This event is fired each time the transfer status changes for a file being downloaded.  The TransferUpdateArgs passed with each received message includes a unique ID if the file transfer, and the current real-time status of the transfer.
/// - public static event EventHandler<TransferUpdateArgs> FileUploadUpdated:
/// This event is fired each time the transfer status changes for a file being uploaded.  The TransferUpdateArgs passed with each received message includes a unique ID if the file transfer, and the current real-time status of the transfer.
/// .
///
/// \namespace CloudApiPublic
/// \brief Contains all public API functions of Cloud for Windows XP through Windows 8. See detailed description.
///
/// Primary components:\n
/// \link CloudApiPublic.CLCredential CLCredential \endlink stores authentication information for all communication and services.\n
/// \link CloudApiPublic.CLSyncBox CLSyncBox \endlink represents a SyncBox in Cloud where everything is stored.\n
/// \link CloudApiPublic.CLSyncEngine CLSyncEngine \endlink performs active sync of files and folders within a specified path to a syncbox in Cloud.\n
/// \internal \link CloudApiPublic.PushNotification.CLNotification PushNotification.CLNotification \endlink allows manual subscription to push notifications and is used internally by \link CloudApiPublic.CLSync CLSync \endlink.\n \endinternal
/// \internal \link CloudApiPublic.REST.CLHttpRest REST.CLHttpRest \endlink allows manual access to Cloud communication methods for file\folder queries, posting changes, and file transfer. It is used internally by \link CloudApiPublic.CLSync CLSync \endlink.\n \endinternal
/// \link CloudApiPublic.Support.CLTrace Support.CLTrace \endlink writes a message to log from a required format string and any object parameter arguments. It is used conditionally by other public API classes when instantiated with advanced settings for trace.
///
/// \namespace CloudApiPublic.EventMessageReceiver
/// \brief Contains the \link CloudApiPublic.EventMessageReceiver.EventMessageReceiver EventMessageReceiver \endlink which acts as a view model for status changes such as growls and sync status messages. It also exposes events for messages and status changes.
///
/// \namespace CloudApiPublic.Interfaces
/// \brief Contains interfaces required as inputs for various public API functions.
///
/// \internal
/// \namespace CloudApiPublic.JsonContracts
/// \brief Contains deserialized request or response objects for HTTP REST communication to Cloud.
/// \endinternal
///
/// \namespace CloudApiPublic.Model
/// \brief Contains various objects exposed through public API functions.
///
/// \namespace CloudApiPublic.PushNotification
/// \brief Contains notification event arguments \internal and the \link CloudApiPublic.PushNotification.CLNotification CLNotification \endlink which allows manual subscription to push notifications. \endinternal
///
/// \internal
/// \namespace CloudApiPublic.REST
/// \brief Contains the \link CloudApiPublic.REST.CLHttpRest CLHttpRest \endlink which allows manual access to Cloud communication methods for file\folder queries, posting changes, and file transfer.
/// \endinternal
///
/// \namespace CloudApiPublic.Static
/// \brief Contains various static helper classes such as \link CloudApiPublic.Static.Helpers Helpers \endlink
///
/// \namespace CloudApiPublic.Support
/// \brief Contains the \link CloudApiPublic.Support.CLTrace CLTrace \endlink which writes a message to log from a required format string and any object parameter arguments.
///
/// \namespace CloudApiPublicSamples
/// \brief Contains sample code which implements \link CloudApiPublic CloudApiPublic \endlink library and uses it to allow single folder active sync; it also can display status changes.
///
/// \link CloudApiPublicSamples.EventMessageReceiver.EventMessageReceiver EventMessageReceiver.EventMessageReceiver \endlink acts as a view model for status changes such as growls and sync status messages. It also exposes events for messages and status changes. \link CloudApiPublic.CLSyncEngine  CloudApiPublic.CLSyncEngine \endlink fires event callbacks upon changes.\n
///
/// \section copyright_sec Copyright (C) Cloud.com.  All Rights Reserved.
/// http://www.cloud.com
