<UserControl x:Class="win_client.UserControls.TrayIcon"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:tb="clr-namespace:Hardcodet.Wpf.TaskbarNotification;assembly=Hardcodet.Wpf.TaskbarNotification"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">
    
    <UserControl.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/Cloud;component/Skins/MainSkin.xaml" />
                <ResourceDictionary Source="/Cloud;component/Skins/NotifyIconResources.xaml" />
            </ResourceDictionary.MergedDictionaries>
        </ResourceDictionary>
    </UserControl.Resources>

    <UserControl.Triggers>
        <EventTrigger RoutedEvent="tb:TaskbarIcon.TrayToolTipOpen" SourceName="tb" />
    </UserControl.Triggers>

    <Grid x:Name="LayoutRoot">
        <!--
      THE TASKBARICON ELEMENT WAS DECLARED INLINE IN ORDER TO USE DATABINDING
      FOR ITS PROPERTIES. IN  A REAL-LIFE APP, YOU'D PROBABLY RATHER DECLARE
      IT IN A RESOURCE DICTIONARY SO YOU CAN ALSO USE IT IF THERE IS NO WINDOW
      OPEN.
    -->

        <tb:TaskbarIcon
        x:Name="tb"
        VerticalAlignment="Top"
        IconSource="/Cloud;component/Artwork/cloud.ico"
        ToolTipText="Cloud"
        ContextMenu="{StaticResource tbMenu}"
        Visibility="{Binding TaskbarIconVisibility, Mode=TwoWay}"
        MenuActivation="LeftOrRightClick"
        DoubleClickCommand="{Binding ShowPreferencesPageCommand, Mode=OneTime}"
        DoubleClickCommandParameter="{Binding}"
        >

            <!-- TODO: Add the following code, and add the command on this line to the list above to cause the test popup on left click: PopupActivation="LeftClick"-->
            <!--
            <tb:TaskbarIcon.TrayPopup>
                // the control will be put into a popup with an explicit DataContext 
                <local:FancyPopup />
            </tb:TaskbarIcon.TrayPopup>
            -->

            <!--
            <tb:TaskbarIcon.TrayToolTip>
                // the control will be put into a tooltip with an explicit DataContext
                // <local:FancyToolTip Opacity="0.85" InfoText="{Binding Path=ToolTipText}" /> 
                // <local:FancyToolTip Opacity="0.85" />
                // InfoText="Not Used!"
            </tb:TaskbarIcon.TrayToolTip>
            -->

        </tb:TaskbarIcon>
    </Grid>
</UserControl>
