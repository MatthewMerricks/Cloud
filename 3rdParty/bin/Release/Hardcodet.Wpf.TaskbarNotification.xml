<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Hardcodet.Wpf.TaskbarNotification</name>
    </assembly>
    <members>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.BalloonIcon">
            <summary>
             Supported icons for the tray's ballon messages.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.BalloonIcon.None">
            <summary>
            The balloon message is displayed without an icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.BalloonIcon.Info">
            <summary>
            An information is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.BalloonIcon.Warning">
            <summary>
            A warning is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.BalloonIcon.Error">
            <summary>
            An error is displayed.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.TrayInfo">
            <summary>
            Resolves the current tray position.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.TrayInfo.GetTrayLocation">
            <summary>
            Gets the position of the system tray.
            </summary>
            <returns>Tray coordinates.</returns>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.Point">
            <summary>
            Win API struct providing coordinates for a single point.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowProcedureHandler">
            <summary>
            Callback delegate which is used by the Windows API to
            submit window messages.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowClass">
            <summary>
            Win API WNDCLASS struct - represents a single window.
            Used to receive window messages.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode">
            <summary>
            Defines flags that define when a popup
            is being displyed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.RightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the right mouse button.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.DoubleClick">
            <summary>
            The item is displayed if the user double-clicks the
            tray icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftOrRightClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left or the right mouse button.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftOrDoubleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the left mouse button or if a
            double-click is being performed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.MiddleClick">
            <summary>
            The item is displayed if the user clicks the
            tray icon with the middle mouse button.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.All">
            <summary>
            The item is displayed whenever a click occurs.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper">
            <summary>
            Helper class used by routed events of the
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon"/> class.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper.RaiseEvent(System.Windows.DependencyObject,System.Windows.RoutedEventArgs)">
            <summary>
            A static helper method to raise a routed event on a target UIElement or ContentElement.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="args">RoutedEventArgs to use when raising the event</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper.AddHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that adds a handler for a routed event 
            to a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will be handled</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.RoutedEventHelper.RemoveHandler(System.Windows.DependencyObject,System.Windows.RoutedEvent,System.Delegate)">
            <summary>
            A static helper method that removes a handler for a routed event 
            from a target UIElement or ContentElement.
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="routedEvent">Event that will no longer be handled</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi">
            <summary>
            Win32 API imports.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)">
            <summary>
            Creates, updates or deletes the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.CreateWindowEx(Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx,System.UInt16,System.String,Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles,System.Int32,System.Int32,System.Int32,System.Int32,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)">
            <summary>
            Creates the helper window that receives messages from the taskar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.DefWindowProc(System.IntPtr,Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages,System.IntPtr,System.IntPtr)">
            <summary>
            Processes a default windows procedure.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.RegisterClass(Hardcodet.Wpf.TaskbarNotification.Interop.WindowClass@)">
            <summary>
            Registers the helper window class.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.RegisterWindowMessage(System.String)">
            <summary>
            Registers a listener for a window message.
            </summary>
            <param name="lpString"></param>
            <returns></returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.DestroyWindow(System.IntPtr)">
            <summary>
            Used to destroy the hidden helper window that receives messages from the
            taskbar icon.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.SetForegroundWindow(System.IntPtr)">
            <summary>
            Gives focus to a given window.
            </summary>
            <param name="hWnd"></param>
            <returns></returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.GetDoubleClickTime">
            <summary>
            Gets the maximum number of milliseconds that can elapse between a
            first click and a second click for the OS to consider the
            mouse action a double-click.
            </summary>
            <returns>The maximum amount of time, in milliseconds, that can
            elapse between a first click and a second click for the OS to
            consider the mouse action a double-click.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.GetCursorPos(Hardcodet.Wpf.TaskbarNotification.Interop.Point@)">
            <summary>
            Gets the screen coordinates of the current mouse position.
            </summary>
            <param name="lpPoint"></param>
            <returns></returns>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles">
            <summary>
            Window Styles.
            The following styles can be specified wherever a window style is required. After the control has been created, these styles cannot be modified, except as noted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_BORDER">
            <summary>The window has a thin-line border.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_CAPTION">
            <summary>The window has a title bar (includes the WS_BORDER style).</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_CHILD">
            <summary>The window is a child window. A window with this style cannot have a menu bar. This style cannot be used with the WS_POPUP style.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_CLIPCHILDREN">
            <summary>Excludes the area occupied by child windows when drawing occurs within the parent window. This style is used when creating the parent window.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_CLIPSIBLINGS">
            <summary>
            Clips child windows relative to each other; that is, when a particular child window receives a WM_PAINT message, the WS_CLIPSIBLINGS style clips all other overlapping child windows out of the region of the child window to be updated.
            If WS_CLIPSIBLINGS is not specified and child windows overlap, it is possible, when drawing within the client area of a child window, to draw within the client area of a neighboring child window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_DISABLED">
            <summary>The window is initially disabled. A disabled window cannot receive input from the user. To change this after a window has been created, use the EnableWindow function.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_DLGFRAME">
            <summary>The window has a border of a style typically used with dialog boxes. A window with this style cannot have a title bar.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_GROUP">
            <summary>
            The window is the first control of a group of controls. The group consists of this first control and all controls defined after it, up to the next control with the WS_GROUP style.
            The first control in each group usually has the WS_TABSTOP style so that the user can move from group to group. The user can subsequently change the keyboard focus from one control in the group to the next control in the group by using the direction keys.
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_HSCROLL">
            <summary>The window has a horizontal scroll bar.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_MAXIMIZE">
            <summary>The window is initially maximized.</summary> 
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_MAXIMIZEBOX">
            <summary>The window has a maximize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary> 
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_MINIMIZE">
            <summary>The window is initially minimized.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_MINIMIZEBOX">
            <summary>The window has a minimize button. Cannot be combined with the WS_EX_CONTEXTHELP style. The WS_SYSMENU style must also be specified.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_OVERLAPPED">
            <summary>The window is an overlapped window. An overlapped window has a title bar and a border.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_OVERLAPPEDWINDOW">
            <summary>The window is an overlapped window.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_POPUP">
            <summary>The window is a pop-up window. This style cannot be used with the WS_CHILD style.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_POPUPWINDOW">
            <summary>The window is a pop-up window. The WS_CAPTION and WS_POPUPWINDOW styles must be combined to make the window menu visible.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_SIZEFRAME">
            <summary>The window has a sizing border.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_SYSMENU">
            <summary>The window has a window menu on its title bar. The WS_CAPTION style must also be specified.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_TABSTOP">
            <summary>
            The window is a control that can receive the keyboard focus when the user presses the TAB key.
            Pressing the TAB key changes the keyboard focus to the next control with the WS_TABSTOP style.  
            You can turn this style on and off to change dialog box navigation. To change this style after a window has been created, use the SetWindowLong function.
            For user-created windows and modeless dialogs to work with tab stops, alter the message loop to call the IsDialogMessage function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_VISIBLE">
            <summary>The window is initially visible. This style can be turned on and off by using the ShowWindow or SetWindowPos function.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStyles.WS_VSCROLL">
            <summary>The window has a vertical scroll bar.</summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_ACCEPTFILES">
            <summary>
            Specifies that a window created with this style accepts drag-drop files.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_APPWINDOW">
            <summary>
            Forces a top-level window onto the taskbar when the window is visible.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_CLIENTEDGE">
            <summary>
            Specifies that a window has a border with a sunken edge.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_COMPOSITED">
            <summary>
            Windows XP: Paints all descendants of a window in bottom-to-top painting order using double-buffering. For more information, see Remarks. This cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_CONTEXTHELP">
            <summary>
            Includes a question mark in the title bar of the window. When the user clicks the question mark, the cursor changes to a question mark with a pointer. If the user then clicks a child window, the child receives a WM_HELP message. The child window should pass the message to the parent window procedure, which should call the WinHelp function using the HELP_WM_HELP command. The Help application displays a pop-up window that typically contains help for the child window.
            WS_EX_CONTEXTHELP cannot be used with the WS_MAXIMIZEBOX or WS_MINIMIZEBOX styles.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_CONTROLPARENT">
            <summary>
            The window itself contains child windows that should take part in dialog box navigation. If this style is specified, the dialog manager recurses into children of this window when performing navigation operations such as handling the TAB key, an arrow key, or a keyboard mnemonic.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_DLGMODALFRAME">
            <summary>
            Creates a window that has a double border; the window can, optionally, be created with a title bar by specifying the WS_CAPTION style in the dwStyle parameter.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_LAYERED">
            <summary>
            Windows 2000/XP: Creates a layered window. Note that this cannot be used for child windows. Also, this cannot be used if the window has a class style of either CS_OWNDC or CS_CLASSDC. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_LAYOUTRTL">
            <summary>
            Arabic and Hebrew versions of Windows 98/Me, Windows 2000/XP: Creates a window whose horizontal origin is on the right edge. Increasing horizontal values advance to the left. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_LEFT">
            <summary>
            Creates a window that has generic left-aligned properties. This is the default.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_LEFTSCROLLBAR">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading order alignment, the vertical scroll bar (if present) is to the left of the client area. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_LTRREADING">
            <summary>
            The window text is displayed using left-to-right reading-order properties. This is the default.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_MDICHILD">
            <summary>
            Creates a multiple-document interface (MDI) child window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_NOACTIVATE">
            <summary>
            Windows 2000/XP: A top-level window created with this style does not become the foreground window when the user clicks it. The system does not bring this window to the foreground when the user minimizes or closes the foreground window. 
            To activate the window, use the SetActiveWindow or SetForegroundWindow function.
            The window does not appear on the taskbar by default. To force the window to appear on the taskbar, use the WS_EX_APPWINDOW style.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_NOINHERITLAYOUT">
            <summary>
            Windows 2000/XP: A window created with this style does not pass its window layout to its child windows.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_NOPARENTNOTIFY">
            <summary>
            Specifies that a child window created with this style does not send the WM_PARENTNOTIFY message to its parent window when it is created or destroyed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_OVERLAPPEDWINDOW">
            <summary>
            Combines the WS_EX_CLIENTEDGE and WS_EX_WINDOWEDGE styles.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_PALETTEWINDOW">
            <summary>
            Combines the WS_EX_WINDOWEDGE, WS_EX_TOOLWINDOW, and WS_EX_TOPMOST styles.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_RIGHT">
            <summary>
            The window has generic "right-aligned" properties. This depends on the window class. This style has an effect only if the shell language is Hebrew, Arabic, or another language that supports reading-order alignment; otherwise, the style is ignored.
            Using the WS_EX_RIGHT style for static or edit controls has the same effect as using the SS_RIGHT or ES_RIGHT style, respectively. Using this style with button controls has the same effect as using BS_RIGHT and BS_RIGHTBUTTON styles.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_RIGHTSCROLLBAR">
            <summary>
            Vertical scroll bar (if present) is to the right of the client area. This is the default.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_RTLREADING">
            <summary>
            If the shell language is Hebrew, Arabic, or another language that supports reading-order alignment, the window text is displayed using right-to-left reading-order properties. For other languages, the style is ignored.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_STATICEDGE">
            <summary>
            Creates a window with a three-dimensional border style intended to be used for items that do not accept user input.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_TOOLWINDOW">
            <summary>
            Creates a tool window; that is, a window intended to be used as a floating toolbar. A tool window has a title bar that is shorter than a normal title bar, and the window title is drawn using a smaller font. A tool window does not appear in the taskbar or in the dialog that appears when the user presses ALT+TAB. If a tool window has a system menu, its icon is not displayed on the title bar. However, you can display the system menu by right-clicking or by typing ALT+SPACE. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_TOPMOST">
            <summary>
            Specifies that a window created with this style should be placed above all non-topmost windows and should stay above them, even when the window is deactivated. To add or remove this style, use the SetWindowPos function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_TRANSPARENT">
            <summary>
            Specifies that a window created with this style should not be painted until siblings beneath the window (that were created by the same thread) have been painted. The window appears transparent because the bits of underlying sibling windows have already been painted.
            To achieve transparency without these restrictions, use the SetWindowRgn function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowStylesEx.WS_EX_WINDOWEDGE">
            <summary>
            Specifies that a window has a border with a raised edge.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages">
            <summary>
            Windows Messages
            Defined in winuser.h from Windows SDK v6.1
            Documentation pulled from MSDN.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen. 
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application. 
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window. 
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed. 
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette. 
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other windowd go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application. 
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.WindowsMessages.SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent">
            <summary>
            Event flags for clicked events.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.MouseMove">
            <summary>
            The mouse was moved withing the
            taskbar icon's area.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconRightMouseDown">
            <summary>
            The right mouse button was clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconLeftMouseDown">
            <summary>
            The left mouse button was clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconRightMouseUp">
            <summary>
            The right mouse button was released.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconLeftMouseUp">
            <summary>
            The left mouse button was released.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconMiddleMouseDown">
            <summary>
            The middle mouse button was clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconMiddleMouseUp">
            <summary>
            The middle mouse button was released.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.IconDoubleClick">
            <summary>
            The taskbar icon was double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent.BalloonToolTipClicked">
            <summary>
            The balloon tip was clicked.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand">
            <summary>
            Main operations performed on the
            <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)"/> function.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.Add">
            <summary>
            The taskbar icon is being created.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.Modify">
            <summary>
            The settings of the taskbar icon are being updated.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.Delete">
            <summary>
            The taskbar icon is deleted.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.SetFocus">
            <summary>
            Focus is returned to the taskbar icon. Currently not in use.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.SetVersion">
            <summary>
            Shell32.dll version 5.0 and later only. Instructs the taskbar
            to behave according to the version number specified in the 
            uVersion member of the structure pointed to by lpdata.
            This message allows you to specify whether you want the version
            5.0 behavior found on Microsoft Windows 2000 systems, or the
            behavior found on earlier Shell versions. The default value for
            uVersion is zero, indicating that the original Windows 95 notify
            icon behavior should be used.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData">
            <summary>
            A struct that is submitted in order to configure
            the taskbar icon. Provides various members that
            can be configured partially, according to the
            values of the <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers"/>
            that were defined.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.cbSize">
            <summary>
            Size of this structure, in bytes.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.WindowHandle">
            <summary>
            Handle to the window that receives notification messages associated with an icon in the
            taskbar status area. The Shell uses hWnd and uID to identify which icon to operate on
            when Shell_NotifyIcon is invoked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.TaskbarIconId">
            <summary>
            Application-defined identifier of the taskbar icon. The Shell uses hWnd and uID to identify
            which icon to operate on when Shell_NotifyIcon is invoked. You can have multiple icons
            associated with a single hWnd by assigning each a different uID. This feature, however
            is currently not used.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.ValidMembers">
            <summary>
            Flags that indicate which of the other members contain valid data. This member can be
            a combination of the NIF_XXX constants.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.CallbackMessageId">
            <summary>
            Application-defined message identifier. The system uses this identifier to send
            notifications to the window identified in hWnd.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.IconHandle">
            <summary>
            A handle to the icon that should be displayed. Just
            <see cref="P:System.Drawing.Icon.Handle"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.ToolTipText">
            <summary>
            String with the text for a standard ToolTip. It can have a maximum of 64 characters including
            the terminating NULL. For Version 5.0 and later, szTip can have a maximum of
            128 characters, including the terminating NULL.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.IconState">
            <summary>
            State of the icon. Remember to also set the <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.StateMask">
            <summary>
            A value that specifies which bits of the state member are retrieved or modified.
            For example, setting this member to <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconState.Hidden"/>
            causes only the item's hidden
            state to be retrieved.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonText">
            <summary>
            String with the text for a balloon ToolTip. It can have a maximum of 255 characters.
            To remove the ToolTip, set the NIF_INFO flag in uFlags and set szInfo to an empty string.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.VersionOrTimeout">
            <summary>
            Mainly used to set the version when <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)"/> is invoked
            with <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand.SetVersion"/>. However, for legacy operations,
            the same member is also used to set timouts for balloon ToolTips.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonTitle">
            <summary>
            String containing a title for a balloon ToolTip. This title appears in boldface
            above the text. It can have a maximum of 63 characters.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonFlags">
            <summary>
            Adds an icon to a balloon ToolTip, which is placed to the left of the title. If the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonTitle"/> member is zero-length, the icon is not shown.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.TaskbarIconGuid">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.<br/>
            - Windows 7 and later: A registered GUID that identifies the icon.
              This value overrides uID and is the recommended method of identifying the icon.<br/>
            - Windows XP through Windows Vista: Reserved.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.CustomBalloonIconHandle">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The handle of a customized
            balloon icon provided by the application that should be used independently
            of the tray icon. If this member is non-NULL and the <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.User"/>
            flag is set, this icon is used as the balloon icon.<br/>
            If this member is NULL, the legacy behavior is carried out.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.CreateDefault(System.IntPtr)">
            <summary>
            Creates a default data structure that provides
            a hidden taskbar icon without the icon being set.
            </summary>
            <param name="handle"></param>
            <returns></returns>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers">
            <summary>
            Indicates which members of a <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> structure
            were set, and thus contain valid data or provide additional information
            to the ToolTip as to how it should display.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Message">
            <summary>
            The message ID is set.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Icon">
            <summary>
            The notification icon is set.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Tip">
            <summary>
            The tooltip is set.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.State">
            <summary>
            State information (<see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconState"/>) is set. This
            applies to both <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.IconState"/> and
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.StateMask"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Info">
            <summary>
            The ballon ToolTip is set. Accordingly, the following
            members are set: <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonText"/>,
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonTitle"/>, <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.BalloonFlags"/>,
            and <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData.VersionOrTimeout"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Realtime">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. If the ToolTip
            cannot be displayed immediately, discard it.<br/>
            Use this flag for ToolTips that represent real-time information which
            would be meaningless or misleading if displayed at a later time.
            For example, a message that states "Your telephone is ringing."<br/>
            This modifies and must be combined with the <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.Info"/> flag.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers.UseLegacyToolTips">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later.
            Use the standard ToolTip. Normally, when uVersion is set
            to NOTIFYICON_VERSION_4, the standard ToolTip is replaced
            by the application-drawn pop-up user interface (UI).
            If the application wants to show the standard tooltip
            in that case, regardless of whether the on-hover UI is showing,
            it can specify NIF_SHOWTIP to indicate the standard tooltip
            should still be shown.<br/>
            Note that the NIF_SHOWTIP flag is effective until the next call 
            to Shell_NotifyIcon.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.IconState">
            <summary>
            The state of the icon - can be set to
            hide the icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconState.Visible">
            <summary>
            The icon is visible.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.IconState.Hidden">
            <summary>
            Hide the icon.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion">
            <summary>
            The notify icon version that is used. The higher
            the version, the more capabilities are available.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion.Win95">
            <summary>
            Default behavior (legacy Win95). Expects
            a <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> size of 488.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion.Win2000">
            <summary>
            Behavior representing Win2000 an higher. Expects
            a <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> size of 504.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion.Vista">
            <summary>
            Extended tooltip support, which is available
            for Vista and later.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags">
            <summary>
            Flags that define the icon that is shown on a balloon
            tooltip.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.None">
            <summary>
            No icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.Info">
            <summary>
            An information icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.Warning">
            <summary>
            A warning icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.Error">
            <summary>
            An error icon is displayed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.User">
            <summary>
            Windows XP Service Pack 2 (SP2) and later.
            Use a custom icon as the title icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.NoSound">
            <summary>
            Windows XP (Shell32.dll version 6.0) and later.
            Do not play the associated sound. Applies only to balloon ToolTips.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.LargeIcon">
            <summary>
            Windows Vista (Shell32.dll version 6.0.6) and later. The large version
            of the icon should be used as the balloon icon. This corresponds to the
            icon with dimensions SM_CXICON x SM_CYICON. If this flag is not set,
            the icon with dimensions XM_CXSMICON x SM_CYSMICON is used.<br/>
            - This flag can be used with all stock icons.<br/>
            - Applications that use older customized icons (NIIF_USER with hIcon) must
              provide a new SM_CXICON x SM_CYICON version in the tray icon (hIcon). These
              icons are scaled down when they are displayed in the System Tray or
              System Control Area (SCA).<br/>
            - New customized icons (NIIF_USER with hBalloonIcon) must supply an
              SM_CXICON x SM_CYICON version in the supplied icon (hBalloonIcon).
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags.RespectQuietTime">
            <summary>
            Windows 7 and later.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink">
            <summary>
            Receives messages from the taskbar icon through
            window messages of an underlying helper window.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.CallbackMessageId">
            <summary>
            The ID of messages that are received from the the
            taskbar icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.taskbarRestartMessageId">
            <summary>
            The ID of the message that is being received if the
            taskbar is (re)started.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.isDoubleClick">
            <summary>
            Used to track whether a mouse-up event is just
            the aftermath of a double-click and therefore needs
            to be suppressed.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.messageHandler">
            <summary>
            A delegate that processes messages of the hidden
            native window that receives window messages. Storing
            this reference makes sure we don't loose our reference
            to the message window.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.#ctor(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion)">
            <summary>
            Creates a new message sink that receives message from
            a given taskbar icon.
            </summary>
            <param name="version"></param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.CreateEmpty">
            <summary>
            Creates a dummy instance that provides an empty
            pointer rather than a real window handler.<br/>
            Used at design time.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.CreateMessageWindow">
            <summary>
            Creates the helper message window that is used
            to receive messages from the taskbar icon.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.OnWindowMessageReceived(System.IntPtr,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Callback method that receives messages from the taskbar area.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.ProcessWindowMessage(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Processes incoming system messages.
            </summary>
            <param name="msg">Callback ID.</param>
            <param name="wParam">If the version is <see cref="F:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconVersion.Vista"/>
            or higher, this parameter can be used to resolve mouse coordinates.
            Currently not in use.</param>
            <param name="lParam">Provides information about the event.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose(System.Boolean)">
            <summary>
            Removes the windows hook that receives window
            messages and closes the underlying helper window.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.WindowId">
            <summary>
            Window class ID.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.MessageWindowHandle">
            <summary>
            Handle for the message window.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Version">
            <summary>
            The version of the underlying icon. Defines how
            incoming messages are interpreted.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.ChangeToolTipStateRequest">
            <summary>
            The custom tooltip should be closed or hidden.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.MouseEventReceived">
            <summary>
            Fired in case the user clicked or moved within
            the taskbar icon area.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.BallonToolTipChanged">
            <summary>
            Fired if a balloon ToolTip was either displayed
            or closed (indicated by the boolean flag).
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.TaskbarCreated">
            <summary>
            Fired if the taskbar was created or restarted. Requires the taskbar
            icon to be reset.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.IsDisposed">
            <summary>
            Set to true as soon as <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WindowMessageSink.Dispose"/>
            has been invoked.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Properties.Resources.DefaultTrayIcon">
            <summary>
              Looks up a localized resource of type System.Drawing.Icon similar to (Icon).
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon">
            <summary>
            A WPF proxy to for a taskbar icon (NotifyIcon) that sits in the system's
            taskbar notification area ("system tray").
            </summary>
            <summary>
            Contains declarations of WPF dependency properties
            and events.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CategoryName">
            <summary>
            Category name that is set on designer properties.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.iconData">
            <summary>
            Represents the current icon data.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.messageSink">
            <summary>
            Receives messages from the taskbar icon.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.delayedTimerAction">
            <summary>
            An action that is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimer"/> fires.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimer">
            <summary>
            A timer that is used to differentiate between single
            and double clicks.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.balloonCloseTimer">
            <summary>
            A timer that is used to close open balloon tooltips.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.#ctor">
            <summary>
            Inits the taskbar icon and registers a message listener
            in order to receive events from the taskbar area.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowCustomBalloon(System.Windows.UIElement,System.Windows.Controls.Primitives.PopupAnimation,System.Nullable{System.Int32})">
            <summary>
            Shows a custom control as a tooltip in the tray location.
            </summary>
            <param name="balloon"></param>
            <param name="animation">An optional animation for the popup.</param>
            <param name="timeout">The time after which the popup is being closed.
            Submit null in order to keep the balloon open inde
            </param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="balloon"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ResetBalloonCloseTimer">
            <summary>
            Resets the closing timeout, which effectively
            keeps a displayed balloon message open until
            it is either closed programmatically through
            <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CloseBalloon"/> or due to a new
            message being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CloseBalloon">
            <summary>
            Closes the current <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon"/>, if the
            property is set.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CloseBalloonCallback(System.Object)">
            <summary>
            Timer-invoke event which closes the currently open balloon and
            resets the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon"/> dependency property.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnMouseEvent(Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent)">
            <summary>
            Processes mouse events, which are bubbled
            through the class' routed events, trigger
            certain actions (e.g. show a popup), or
            both.
            </summary>
            <param name="me">Event flag.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnToolTipChange(System.Boolean)">
            <summary>
            Displays a custom tooltip, if available. This method is only
            invoked for Windows Vista and above.
            </summary>
            <param name="visible">Whether to show or hide the tooltip.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CreateCustomToolTip">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="!:Popup.HitTestable"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.WriteToolTipSettings">
            <summary>
            Sets tooltip settings for the class depending on defined
            dependency properties and OS support.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CreatePopup">
            <summary>
            Creates a <see cref="T:System.Windows.Controls.ToolTip"/> control that either
            wraps the currently set <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/>
            control or the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> string.<br/>
            If <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/> itself is already
            a <see cref="T:System.Windows.Controls.ToolTip"/> instance, it will be used directly.
            </summary>
            <remarks>We use a <see cref="T:System.Windows.Controls.ToolTip"/> rather than
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> because there was no way to prevent a
            popup from causing cyclic open/close commands if it was
            placed under the mouse. ToolTip internally uses a Popup of
            its own, but takes advance of Popup's internal <see cref="!:Popup.HitTestable"/>
            property which prevents this issue.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowTrayPopup(Hardcodet.Wpf.TaskbarNotification.Interop.Point)">
            <summary>
            Displays the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/> control if
            it was set.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowContextMenu(Hardcodet.Wpf.TaskbarNotification.Interop.Point)">
            <summary>
            Displays the <see cref="T:System.Windows.Controls.ContextMenu"/> if
            it was set.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnBalloonToolTipChanged(System.Boolean)">
            <summary>
            Bubbles events if a balloon ToolTip was displayed
            or removed.
            </summary>
            <param name="visible">Whether the ToolTip was just displayed
            or removed.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowBalloonTip(System.String,System.String,Hardcodet.Wpf.TaskbarNotification.BalloonIcon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="symbol">A symbol that indicates the severity.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowBalloonTip(System.String,System.String,System.Drawing.Icon)">
            <summary>
            Displays a balloon tip with the specified title,
            text, and a custom icon in the taskbar for the specified time period.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="customIcon">A custom icon.</param>
            <exception cref="T:System.ArgumentNullException">If <paramref name="customIcon"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ShowBalloonTip(System.String,System.String,Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags,System.IntPtr)">
            <summary>
            Invokes <see cref="M:Hardcodet.Wpf.TaskbarNotification.Interop.WinApi.Shell_NotifyIcon(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@)"/> in order to display
            a given balloon ToolTip.
            </summary>
            <param name="title">The title to display on the balloon tip.</param>
            <param name="message">The text to display on the balloon tip.</param>
            <param name="flags">Indicates what icon to use.</param>
            <param name="balloonIconHandle">A handle to a custom icon, if any, or
            <see cref="F:System.IntPtr.Zero"/>.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.HideBalloonTip">
            <summary>
            Hides a balloon ToolTip, if any is displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoSingleClickAction(System.Object)">
            <summary>
            Performs a delayed action if the user requested an action
            based on a single click of the left mouse.<br/>
            This method is invoked by the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.singleClickTimer"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetVersion">
            <summary>
            Sets the version flag for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.iconData"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTaskbarCreated">
            <summary>
            Recreates the taskbar icon if the whole taskbar was
            recreated (e.g. because Explorer was shut down).
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CreateTaskbarIcon">
            <summary>
            Creates the taskbar icon. This message is invoked during initialization,
            if the taskbar is restarted, and whenever the icon is displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveTaskbarIcon">
            <summary>
            Closes the taskbar icon if required.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.EnsureNotDisposed">
            <summary>
            Checks if the object has been disposed and
            raises a <see cref="T:System.ObjectDisposedException"/> in case
            the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsDisposed"/> flag is true.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnExit(System.Object,System.EventArgs)">
            <summary>
            Disposes the class if the application exits.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Finalize">
            <summary>
            This destructor will run only if the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose"/>
            method does not get called. This gives this base class the
            opportunity to finalize.
            <para>
            Important: Do not provide destructors in types derived from
            this class.
            </para>
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose">
            <summary>
            Disposes the object.
            </summary>
            <remarks>This method is not virtual by design. Derived classes
            should override <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose(System.Boolean)">
            <summary>
            Closes the tray and releases all resources.
            </summary>
            <summary>
            <c>Dispose(bool disposing)</c> executes in two distinct scenarios.
            If disposing equals <c>true</c>, the method has been called directly
            or indirectly by a user's code. Managed and unmanaged resources
            can be disposed.
            </summary>
            <param name="disposing">If disposing equals <c>false</c>, the method
            has been called by the runtime from inside the finalizer and you
            should not reference other objects. Only unmanaged resources can
            be disposed.</param>
            <remarks>Check the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsDisposed"/> property to determine whether
            the method has already been called.</remarks>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupResolvedPropertyKey">
            <summary>
            TrayPopupResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.Primitives.Popup"/>
            that is being displayed in the taskbar area based on a user action.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetTrayPopupResolved(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the TrayPopupResolved property.  
            This dependency property indicates ....
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolvedPropertyKey">
            <summary>
            TrayToolTipResolved Read-Only Dependency Property
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolvedProperty">
            <summary>
            A read-only dependency property that returns the <see cref="T:System.Windows.Controls.ToolTip"/>
            that is being displayed.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetTrayToolTipResolved(System.Windows.Controls.ToolTip)">
            <summary>
            Provides a secure method for setting the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolved"/>
            property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloonPropertyKey">
            <summary>
            CustomBalloon Read-Only Dependency Property
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetCustomBalloon(System.Windows.Controls.Primitives.Popup)">
            <summary>
            Provides a secure method for setting the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon"/> property.  
            </summary>
            <param name="value">The new value for the property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty">
            <summary>
            Resolves an image source and updates the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Icon"/> property accordingly.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourcePropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnIconSourcePropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" -->
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty">
            <summary>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnToolTipTextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" -->
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty">
            <summary>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayToolTipPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" -->
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty">
            <summary>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnTrayPopupPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" -->
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.MenuActivationProperty">
            <summary>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupActivationProperty">
            <summary>
            Defines what mouse events trigger the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/>.
            Default is <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftClick"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.VisibilityPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.UIElement.VisibilityProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnVisibilityPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" -->
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.UpdateDataContext(System.Windows.FrameworkElement,System.Object,System.Object)">
            <summary>
            Updates the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> of a given
            <see cref="T:System.Windows.FrameworkElement"/>. This method only updates target elements
            that do not already have a data context of their own, and either assigns
            the <see cref="P:System.Windows.FrameworkElement.DataContext"/> of the NotifyIcon, or the
            NotifyIcon itself, if no data context was assigned at all.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DataContextPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnDataContextPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)" -->
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ContextMenuPropertyChanged(System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            A static callback listener which is being invoked if the
            <see cref="F:System.Windows.FrameworkElement.ContextMenuProperty"/> dependency property has
            been changed. Invokes the <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)"/>
            instance method of the changed instance.
            </summary>
            <param name="d">The currently processed owner of the property.</param>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.OnContextMenuPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)">
            <summary>
            Releases the old and updates the new <see cref="T:System.Windows.Controls.ContextMenu"/> property
            in order to reflect both the NotifyIcon's <see cref="P:System.Windows.FrameworkElement.DataContext"/>
            property and have the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ParentTaskbarIconProperty"/> assigned.
            </summary>
            <param name="e">Provides information about the updated property.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandProperty">
            <summary>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandParameterProperty">
            <summary>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandTargetProperty">
            <summary>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseDownEvent">
            <summary>
            TrayLeftMouseDown Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseDownEvent">
            <summary>
            A helper method to raise the TrayLeftMouseDown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseDownEvent">
            <summary>
            TrayRightMouseDown Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseDownEvent">
            <summary>
            A helper method to raise the TrayRightMouseDown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseDownEvent">
            <summary>
            TrayMiddleMouseDown Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseDownEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseDown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseDownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseDown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseUpEvent">
            <summary>
            TrayLeftMouseUp Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseUpEvent">
            <summary>
            A helper method to raise the TrayLeftMouseUp event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayLeftMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayLeftMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseUpEvent">
            <summary>
            TrayRightMouseUp Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseUpEvent">
            <summary>
            A helper method to raise the TrayRightMouseUp event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayRightMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayRightMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseUpEvent">
            <summary>
            TrayMiddleMouseUp Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseUpEvent">
            <summary>
            A helper method to raise the TrayMiddleMouseUp event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMiddleMouseUpEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMiddleMouseUp event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseDoubleClickEvent">
            <summary>
            TrayMouseDoubleClick Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseDoubleClickEvent">
            <summary>
            A helper method to raise the TrayMouseDoubleClick event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseDoubleClickEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseDoubleClick event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseMoveEvent">
            <summary>
            TrayMouseMove Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseMoveEvent">
            <summary>
            A helper method to raise the TrayMouseMove event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayMouseMoveEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayMouseMove event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipShownEvent">
            <summary>
            TrayBalloonTipShown Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipShownEvent">
            <summary>
            A helper method to raise the TrayBalloonTipShown event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipShownEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipShown event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClosedEvent">
            <summary>
            TrayBalloonTipClosed Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClosedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClosed event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClosedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClosed event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClickedEvent">
            <summary>
            TrayBalloonTipClicked Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClickedEvent">
            <summary>
            A helper method to raise the TrayBalloonTipClicked event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayBalloonTipClickedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayBalloonTipClicked event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayContextMenuOpenEvent">
            <summary>
            TrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the TrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayContextMenuOpenEvent">
            <summary>
            PreviewTrayContextMenuOpen Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayContextMenuOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayContextMenuOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayContextMenuOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupOpenEvent">
            <summary>
            TrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayPopupOpenEvent">
            <summary>
            A helper method to raise the TrayPopupOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayPopupOpenEvent">
            <summary>
            PreviewTrayPopupOpen Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayPopupOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayPopupOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayPopupOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayPopupOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipOpenEvent">
            <summary>
            TrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the TrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipOpenEvent">
            <summary>
            PreviewTrayToolTipOpen Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipOpen event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipOpenEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipOpen event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipCloseEvent">
            <summary>
            TrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the TrayToolTipClose event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the TrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipCloseEvent">
            <summary>
            PreviewTrayToolTipClose Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent">
            <summary>
            A helper method to raise the PreviewTrayToolTipClose event.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePreviewTrayToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PreviewTrayToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupOpenedEvent">
            <summary>
            PopupOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddPopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemovePopupOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the PopupOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaisePopupOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the PopupOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipOpenedEvent">
            <summary>
            ToolTipOpened Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveToolTipOpenedHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipOpened attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseToolTipOpenedEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipOpened event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipCloseEvent">
            <summary>
            ToolTipClose Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveToolTipCloseHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the ToolTipClose attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseToolTipCloseEvent(System.Windows.DependencyObject)">
            <summary>
            A static helper method to raise the ToolTipClose event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.BalloonShowingEvent">
            <summary>
            BalloonShowing Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveBalloonShowingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonShowing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseBalloonShowingEvent(System.Windows.DependencyObject,Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonShowing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.BalloonClosingEvent">
            <summary>
            BalloonClosing Attached Routed Event
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.AddBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Adds a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be added</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RemoveBalloonClosingHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)">
            <summary>
            Removes a handler for the BalloonClosing attached event
            </summary>
            <param name="element">UIElement or ContentElement that listens to the event</param>
            <param name="handler">Event handler to be removed</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.RaiseBalloonClosingEvent(System.Windows.DependencyObject,Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)">
            <summary>
            A static helper method to raise the BalloonClosing event on a target element.
            </summary>
            <param name="target">UIElement or ContentElement on which to raise the event</param>
            <param name="source">The <see cref="T:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon"/> instance that manages the balloon.</param>
        </member>
        <member name="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ParentTaskbarIconProperty">
            <summary>
            An attached property that is assigned to 
            </summary>  
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.GetParentTaskbarIcon(System.Windows.DependencyObject)">
            <summary>
            Gets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SetParentTaskbarIcon(System.Windows.DependencyObject,Hardcodet.Wpf.TaskbarNotification.TaskbarIcon)">
            <summary>
            Sets the ParentTaskbarIcon property.  This dependency property 
            indicates ....
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.#cctor">
            <summary>
            Registers properties.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsTaskbarIconCreated">
            <summary>
            Indicates whether the taskbar icon has been created or not.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.SupportsCustomToolTips">
            <summary>
            Indicates whether custom tooltips are supported, which depends
            on the OS. Windows Vista or higher is required in order to
            support this feature.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsPopupOpen">
            <summary>
            Checks whether a non-tooltip popup is currently opened.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IsDisposed">
            <summary>
            Set to true as soon as <see cref="M:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Dispose"/>
            has been invoked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupResolved">
            <summary>
            Gets the TrayPopupResolved property. Returns
            a <see cref="T:System.Windows.Controls.Primitives.Popup"/> which is either the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/> control itself or a
            <see cref="T:System.Windows.Controls.Primitives.Popup"/> control that contains the
            <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipResolved">
            <summary>
            Gets the TrayToolTipResolved property. Returns 
            a <see cref="T:System.Windows.Controls.ToolTip"/> control that was created
            in order to display either <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip"/>
            or <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.CustomBalloon">
            <summary>
            A custom popup that is being displayed in the tray area in order
            to display messages to the user.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Icon">
            <summary>
            Gets or sets the icon to be displayed. This is not a
            dependency property - if you want to assign the property
            through XAML, please use the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSource"/>
            dependency property.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSource">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.IconSourceProperty"/>
            dependency property:<br/>
            Resolves an image source and updates the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.Icon"/> property accordingly.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipTextProperty"/>
            dependency property:<br/>
            A tooltip text that is being displayed if no custom <see cref="T:System.Windows.Controls.ToolTip"/>
            was set or if custom tooltips are not supported.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTip">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipProperty"/>
            dependency property:<br/>
            A custom UI element that is displayed as a tooltip if the user hovers over the taskbar icon.
            Works only with Vista and above. Accordingly, you should make sure that
            the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.ToolTipText"/> property is set as well.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupProperty"/>
            dependency property:<br/>
            A control that is displayed as a popup when the taskbar icon is clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.MenuActivation">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.MenuActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events display the context menu.
            Defaults to <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.RightClick"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupActivation">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PopupActivationProperty"/>
            dependency property:<br/>
            Defines what mouse events trigger the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopup"/>.
            Default is <see cref="F:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode.LeftClick"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommand">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommand"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.DoubleClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is double clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommand">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandProperty"/>
            dependency property:<br/>
            Associates a command that is being executed if the tray icon is being
            double clicked.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandParameter">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandParameterProperty"/>
            dependency property:<br/>
            Command parameter for the <see cref="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommand"/>.
            </summary>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandTarget">
            <summary>
            A property wrapper for the <see cref="F:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.LeftClickCommandTargetProperty"/>
            dependency property:<br/>
            The target of the command that is fired if the notify icon is clicked.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseDown">
            <summary>
            Occurs when the user presses the left mouse button.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseDown">
            <summary>
            Occurs when the presses the right mouse button.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseDown">
            <summary>
            Occurs when the user presses the middle mouse button.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayLeftMouseUp">
            <summary>
            Occurs when the user releases the left mouse button.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayRightMouseUp">
            <summary>
            Occurs when the user releases the right mouse button.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMiddleMouseUp">
            <summary>
            Occurs when the user releases the middle mouse button.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseDoubleClick">
            <summary>
            Occurs when the user double-clicks the taskbar icon.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayMouseMove">
            <summary>
            Occurs when the user moves the mouse over the taskbar icon.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipShown">
            <summary>
            Occurs when a balloon ToolTip is displayed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClosed">
            <summary>
            Occurs when a balloon ToolTip was closed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayBalloonTipClicked">
            <summary>
            Occurs when the user clicks on a balloon ToolTip.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayContextMenuOpen">
            <summary>
            Bubbled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayContextMenuOpen">
            <summary>
            Tunneled event that occurs when the context menu of the taskbar icon is being displayed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayPopupOpen">
            <summary>
            Bubbled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayPopupOpen">
            <summary>
            Tunneled event that occurs when the custom popup is being opened.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipOpen">
            <summary>
            Bubbled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipOpen">
            <summary>
            Tunneled event that occurs when the custom ToolTip is being displayed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.TrayToolTipClose">
            <summary>
            Bubbled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="E:Hardcodet.Wpf.TaskbarNotification.TaskbarIcon.PreviewTrayToolTipClose">
            <summary>
            Tunneled event that occurs when a custom tooltip is being closed.
            </summary>
        </member>
        <member name="T:Hardcodet.Wpf.TaskbarNotification.Util">
            <summary>
            Util and extension methods.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.CreateHelperWindow">
            <summary>
            Creates an transparent window without dimension that
            can be used to temporarily obtain focus and/or
            be used as a window message sink.
            </summary>
            <returns>Empty window.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.WriteIconData(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.WriteIconData(Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData@,Hardcodet.Wpf.TaskbarNotification.Interop.NotifyCommand,Hardcodet.Wpf.TaskbarNotification.Interop.IconDataMembers)">
            <summary>
            Updates the taskbar icons with data provided by a given
            <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.NotifyIconData"/> instance.
            </summary>
            <param name="data">Configuration settings for the NotifyIcon.</param>
            <param name="command">Operation on the icon (e.g. delete the icon).</param>
            <param name="flags">Defines which members of the <paramref name="data"/>
            structure are set.</param>
            <returns>True if the data was successfully written.</returns>
            <remarks>See Shell_NotifyIcon documentation on MSDN for details.</remarks>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.GetBalloonFlag(Hardcodet.Wpf.TaskbarNotification.BalloonIcon)">
            <summary>
            Gets a <see cref="T:Hardcodet.Wpf.TaskbarNotification.Interop.BalloonFlags"/> enum value that
            matches a given <see cref="T:Hardcodet.Wpf.TaskbarNotification.BalloonIcon"/>.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.ToIcon(System.Windows.Media.ImageSource)">
            <summary>
            Reads a given image resource into a WinForms icon.
            </summary>
            <param name="imageSource">Image source pointing to
            an icon file (*.ico).</param>
            <returns>An icon object that can be used with the
            taskbar area.</returns>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.Is``1(``0,``0[])">
            <summary>
            Checks a list of candidates for equality to a given
            reference value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="value">The evaluated value.</param>
            <param name="candidates">A liste of possible values that are
            regarded valid.</param>
            <returns>True if one of the submitted <paramref name="candidates"/>
            matches the evaluated value. If the <paramref name="candidates"/>
            parameter itself is null, too, the method returns false as well,
            which allows to check with null values, too.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="candidates"/>
            is a null reference.</exception>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.IsMatch(Hardcodet.Wpf.TaskbarNotification.Interop.MouseEvent,Hardcodet.Wpf.TaskbarNotification.PopupActivationMode)">
            <summary>
            Checks if a given <see cref="T:Hardcodet.Wpf.TaskbarNotification.PopupActivationMode"/> is a match for
            an effectively pressed mouse button.
            </summary>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.ExecuteIfEnabled(System.Windows.Input.ICommand,System.Object,System.Windows.IInputElement)">
            <summary>
            Executes a given command if its <see cref="M:System.Windows.Input.ICommand.CanExecute(System.Object)"/> method
            indicates it can run.
            </summary>
            <param name="command">The command to be executed, or a null reference.</param>
            <param name="commandParameter">An optional parameter that is associated with
            the command.</param>
            <param name="target">The target element on which to raise the command.</param>
        </member>
        <member name="M:Hardcodet.Wpf.TaskbarNotification.Util.IsDataContextDataBound(System.Windows.FrameworkElement)">
            <summary>
            Checks whether the <see cref="F:System.Windows.FrameworkElement.DataContextProperty"/>
             is bound or not.
            </summary>
            <param name="element">The element to be checked.</param>
            <returns>True if the data context property is being managed by a
            binding expression.</returns>
            <exception cref="T:System.ArgumentNullException">If <paramref name="element"/>
            is a null reference.</exception>
        </member>
        <member name="P:Hardcodet.Wpf.TaskbarNotification.Util.IsDesignMode">
            <summary>
            Checks whether the application is currently in design mode.
            </summary>
        </member>
    </members>
</doc>
