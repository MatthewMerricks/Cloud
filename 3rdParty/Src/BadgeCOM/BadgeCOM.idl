//
// BadgeCOM.idl
// Cloud Windows COM
//
// Created By DavidBruck.
// Copyright (c) Cloud.com. All rights reserved.

// BadgeCOM.idl : IDL source for BadgeCOM
//

// This file will be processed by the MIDL tool to
// produce the type library (BadgeCOM.tlb) and marshalling code.

import "oaidl.idl";
import "ocidl.idl";
#include "GuidDefinitions.h"

[
	Def_TypeLib_Uuid,   // uuid(xxxxx),
	version(1.0),
]
library BadgeCOMLib
{
	importlib("stdole2.tlb");

    [
	    object,
	    Def_InterfaceIconSyncing_Uuid,  // uuid(xxxxx),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconSyncing : IDispatch{
		[helpstring("method GetOverlayInfo")] HRESULT GetOverlayInfo([out] LPWSTR pwszIconFile, [in] int cchMax, [out] int *pIndex, [out] DWORD *pdwFlags);
		[helpstring("method GetPriority")] HRESULT GetPriority([out] int *pPriority);
		[helpstring("method IsMemberOf")] HRESULT IsMemberOf([in] LPCWSTR pwszPath, [in] DWORD dwAttrib);
    };
    [
	    object,
	    Def_InterfaceIconSynced_Uuid,  // uuid(xxxxx),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconSynced : IDispatch{
		[helpstring("method GetOverlayInfo")] HRESULT GetOverlayInfo([out] LPWSTR pwszIconFile, [in] int cchMax, [out] int *pIndex, [out] DWORD *pdwFlags);
		[helpstring("method GetPriority")] HRESULT GetPriority([out] int *pPriority);
		[helpstring("method IsMemberOf")] HRESULT IsMemberOf([in] LPCWSTR pwszPath, [in] DWORD dwAttrib);
    };
    [
	    object,
	    Def_InterfaceIconSelective_Uuid,  // uuid(xxxxx),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconSelective : IDispatch{
		[helpstring("method GetOverlayInfo")] HRESULT GetOverlayInfo([out] LPWSTR pwszIconFile, [in] int cchMax, [out] int *pIndex, [out] DWORD *pdwFlags);
		[helpstring("method GetPriority")] HRESULT GetPriority([out] int *pPriority);
		[helpstring("method IsMemberOf")] HRESULT IsMemberOf([in] LPCWSTR pwszPath, [in] DWORD dwAttrib);
    };
    [
	    object,
	    Def_InterfaceIconFailed_Uuid,  // uuid(xxxxx),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IBadgeIconFailed : IDispatch{
		[helpstring("method GetOverlayInfo")] HRESULT GetOverlayInfo([out] LPWSTR pwszIconFile, [in] int cchMax, [out] int *pIndex, [out] DWORD *pdwFlags);
		[helpstring("method GetPriority")] HRESULT GetPriority([out] int *pPriority);
		[helpstring("method IsMemberOf")] HRESULT IsMemberOf([in] LPCWSTR pwszPath, [in] DWORD dwAttrib);
    };
    [
	    object,
	    Def_InterfacePubSubServer_Uuid,  // uuid(xxxxx),
	    dual,
	    nonextensible,
	    pointer_default(unique)
    ]
    interface IPubSubServer : IUnknown{
        typedef [v1_enum] enum 
        {
            RC_SUBSCRIBE_GOT_EVENT = 0,                     // we received a subscribed event
            RC_SUBSCRIBE_TRY_AGAIN,                         // call Subscribe again to receive a waiting subscribed event.
            RC_SUBSCRIBE_TIMED_OUT,                         // timed out waiting for an event.
            RC_SUBSCRIBE_CANCELLED,                         // the wait was cancelled.
            RC_SUBSCRIBE_ERROR                              // an error occurred.  Usually an exception.
        } EnumPubSubServerSubscribeReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_PUBLISH_OK = 0,                              // published OK.
            RC_PUBLISH_AT_LEAST_ONE_EVENT_QUEUE_FULL,       // at least one subscriber's event queue was full.
            RC_PUBLISH_ERROR                                // an error occurred.  Usually an exception.
        } EnumPubSubServerPublishReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_CANCEL_OK = 0,                               // subscription found and cancelled
            RC_CANCEL_CANCELLED_BUT_SUBSCRIPTION_NOT_REMOVED,  // subscription found, wait cancelled, but subscription not removed.
            RC_CANCEL_NOT_FOUND,                            // subscription not found
            RC_CANCEL_ERROR                                 // an error occurred.  Usually an exception.
        } EnumPubSubServerCancelWaitingSubscriptionReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_CANCELBYPROCESSID_OK = 0,                    // subscriptions found and cancelled
            RC_CANCELBYPROCESSID_NOT_FOUND,                 // no subscriptions found
            RC_CANCELBYPROCESSID_ERROR                      // an error occurred.  Usually an exception.
        } EnumPubSubServerCancelSubscriptionsByProcessIdReturnCodes;

        typedef [v1_enum] enum 
        {
            RC_CLEANUPUNUSEDRESOURCES_OK = 0,               // cleaned up OK
            RC_CLEANUPUNUSEDRESOURCES_ERROR                 // cleaned up OK
        } EnumPubSubServerCleanUpUnusedResourcesReturnCodes;
        
        typedef [v1_enum] enum 
        {
            BadgeCom_To_BadgeNet=0,
            BadgeNet_To_BadgeCom,
        } EnumEventType;

        typedef [v1_enum] enum 
        {
            BadgeCom_Initialization=0,
            BadgeNet_AddSyncboxFolderPath,
            BadgeNet_RemoveSyncboxFolderPath,
            BadgeNet_AddBadgePath,
            BadgeNet_RemoveBadgePath
        } EnumEventSubType;

        typedef [v1_enum] enum 
        {
            cloudAppBadgeNone=0,
            cloudAppBadgeSynced,
            cloudAppBadgeSyncing,
            cloudAppBadgeFailed,
            cloudAppBadgeSyncSelective
        } EnumCloudAppIconBadgeType;

	    [id(1), helpstring("method Initialize")] HRESULT(Initialize)();

	    [id(2), helpstring("method Publish")] HRESULT(Publish)(
                        [in] EnumEventType EventType, 
                        [in] EnumEventSubType EventSubType, 
                        [in] EnumCloudAppIconBadgeType BadgeType, 
                        [in] BSTR *FullPath, 
                        [in] GUID GuidPublisher,
                        [out, retval] EnumPubSubServerPublishReturnCodes *returnValue);

	    [id(3), helpstring("method Subscribe")] HRESULT(Subscribe)(
                        [in] EnumEventType EventType,
                        [in] GUID guidSubscriber,
                        [in] ULONG TimeoutMilliseconds,
                        [out] EnumEventSubType *outEventSubType,
                        [out] EnumCloudAppIconBadgeType *outBadgeType,
                        [out] BSTR *outFullPath,
                        [out] ULONG *outProcessId,
                        [out] GUID *GuidPublisher,
                        [out, retval] EnumPubSubServerSubscribeReturnCodes *returnValue);

	    [id(4), helpstring("method CancelWaitingSubscription")] HRESULT(CancelWaitingSubscription)(
                        [in] EnumEventType EventType,
                        [in] GUID guidSubscriber,
                        [out, retval] EnumPubSubServerCancelWaitingSubscriptionReturnCodes *returnValue);

	    [id(5), helpstring("method CancelSubscriptionsForProcessId")] HRESULT(CancelSubscriptionsForProcessId)(
                        [in] ULONG ProcessId,
                        [out, retval] EnumPubSubServerCancelSubscriptionsByProcessIdReturnCodes *returnValue);

	    [id(6), helpstring("method CleanUpUnusedResources")] HRESULT(CleanUpUnusedResources)(
                        [out, retval] EnumPubSubServerCleanUpUnusedResourcesReturnCodes *returnValue);

	    [id(7), helpstring("method Terminate")] HRESULT(Terminate)();

        [propget, id(8), helpstring("Name associated with the badging shared memory segment."), bindable] HRESULT SharedMemoryName([out, retval] BSTR* pVal);
    };

	[
		Def_ClassIconSyncing_Uuid  // uuid(xxxxx)		
	]
	coclass BadgeIconSyncing
	{
		[default] interface IBadgeIconSyncing;
	};
	[
		Def_ClassIconSynced_Uuid  // uuid(xxxxx)		
	]
	coclass BadgeIconSynced
	{
		[default] interface IBadgeIconSynced;
	};
	[
		Def_ClassIconSelective_Uuid  // uuid(xxxxx)		
	]
	coclass BadgeIconSelective
	{
		[default] interface IBadgeIconSelective;
	};
	[
		Def_ClassIconFailed_Uuid  // uuid(xxxxx)		
	]
	coclass BadgeIconFailed
	{
		[default] interface IBadgeIconFailed;
	};
	[
		Def_ClassPubSubServer_Uuid  // uuid(xxxxx)		
	]
	coclass PubSubServer
	{
		[default] interface IPubSubServer;
	};
};

import "shobjidl.idl";
