//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.ApplicationServer.Serialization {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SR {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SR() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Microsoft.ApplicationServer.Serialization.SR", typeof(SR).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of referenced collection types contains more than one type with same data contract name. Include only one of the following types. Only matching types can be valid references: {0}.
        /// </summary>
        internal static string AmbiguousReferencedCollectionTypes1 {
            get {
                return ResourceManager.GetString("AmbiguousReferencedCollectionTypes1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of referenced collection types contains more than one type with data contract name &apos;{0}&apos; in namespace &apos;{1}&apos;. Include only one of the following types. Only matching types can be valid references: {2}.
        /// </summary>
        internal static string AmbiguousReferencedCollectionTypes3 {
            get {
                return ResourceManager.GetString("AmbiguousReferencedCollectionTypes3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of referenced types contains more than one type with same data contract name. Need to exclude all but one of the following types. Only matching types can be valid references: {0}.
        /// </summary>
        internal static string AmbiguousReferencedTypes1 {
            get {
                return ResourceManager.GetString("AmbiguousReferencedTypes1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List of referenced types contains more than one type with data contract name &apos;{0}&apos; in namespace &apos;{1}&apos;. Need to exclude all but one of the following types. Only matching types can be valid references: {2}.
        /// </summary>
        internal static string AmbiguousReferencedTypes3 {
            get {
                return ResourceManager.GetString("AmbiguousReferencedTypes3", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot inherit from a type that is not marked with DataContractAttribute or SerializableAttribute.  Consider marking the base type &apos;{1}&apos; with DataContractAttribute or SerializableAttribute, or removing them from the derived type..
        /// </summary>
        internal static string AttributedTypesCannotInheritFromNonAttributedSerializableTypes {
            get {
                return ResourceManager.GetString("AttributedTypesCannotInheritFromNonAttributedSerializableTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serialization Callback &apos;{1}&apos; in type &apos;{0}&apos; must return void..
        /// </summary>
        internal static string CallbackMustReturnVoid {
            get {
                return ResourceManager.GetString("CallbackMustReturnVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Serialization Callback &apos;{1}&apos; in type &apos;{0}&apos; must have a single parameter of type &apos;{2}&apos;..
        /// </summary>
        internal static string CallbackParameterInvalid {
            get {
                return ResourceManager.GetString("CallbackParameterInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Virtual Method &apos;{0}&apos; of type &apos;{1}&apos; cannot be marked with &apos;{2}&apos; attribute..
        /// </summary>
        internal static string CallbacksCannotBeVirtualMethods {
            get {
                return ResourceManager.GetString("CallbacksCannotBeVirtualMethods", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The use of type &apos;{0}&apos; as a get-only collection is not supported with NetDataContractSerializer.  Consider marking the type with the CollectionDataContractAttribute attribute or the SerializableAttribute attribute or adding a setter to the property..
        /// </summary>
        internal static string ClassDataContractReturnedForGetOnlyCollection {
            get {
                return ResourceManager.GetString("ClassDataContractReturnedForGetOnlyCollection", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection type &apos;{0}&apos; does not have a valid Add method..
        /// </summary>
        internal static string CollectionMustHaveAddMethod {
            get {
                return ResourceManager.GetString("CollectionMustHaveAddMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection type &apos;{0}&apos; does not have a valid GetEnumerator method..
        /// </summary>
        internal static string CollectionMustHaveGetEnumeratorMethod {
            get {
                return ResourceManager.GetString("CollectionMustHaveGetEnumeratorMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection type &apos;{0}&apos; must have a non-null item type..
        /// </summary>
        internal static string CollectionMustHaveItemType {
            get {
                return ResourceManager.GetString("CollectionMustHaveItemType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} is a built-in type and cannot be a collection..
        /// </summary>
        internal static string CollectionTypeCannotBeBuiltIn {
            get {
                return ResourceManager.GetString("CollectionTypeCannotBeBuiltIn", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has DataContractAttribute attribute..
        /// </summary>
        internal static string CollectionTypeCannotHaveDataContract {
            get {
                return ResourceManager.GetString("CollectionTypeCannotHaveDataContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not have a valid Add method with parameter of type &apos;{1}&apos;..
        /// </summary>
        internal static string CollectionTypeDoesNotHaveAddMethod {
            get {
                return ResourceManager.GetString("CollectionTypeDoesNotHaveAddMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not have a default constructor..
        /// </summary>
        internal static string CollectionTypeDoesNotHaveDefaultCtor {
            get {
                return ResourceManager.GetString("CollectionTypeDoesNotHaveDefaultCtor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} has multiple definitions of interface &apos;{1}&apos;..
        /// </summary>
        internal static string CollectionTypeHasMultipleDefinitionsOfInterface {
            get {
                return ResourceManager.GetString("CollectionTypeHasMultipleDefinitionsOfInterface", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} does not implement IEnumerable interface..
        /// </summary>
        internal static string CollectionTypeIsNotIEnumerable {
            get {
                return ResourceManager.GetString("CollectionTypeIsNotIEnumerable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContractSerializer config section under System.Runtime.Serialization section group could not be loaded. Verify that machine.config is correctly set up..
        /// </summary>
        internal static string ConfigDataContractSerializerSectionLoadError_ {
            get {
                return ResourceManager.GetString("ConfigDataContractSerializerSectionLoadError ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An internal error has occurred. DataContract cache overflow..
        /// </summary>
        internal static string DataContractCacheOverflow {
            get {
                return ResourceManager.GetString("DataContractCacheOverflow", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ContractNamespaceAttribute attribute maps CLR namespace &apos;{2}&apos; to multiple data contract namespaces &apos;{0}&apos; and &apos;{1}&apos;. You can map a CLR namespace to only one data contract namespace..
        /// </summary>
        internal static string DataContractNamespaceAlreadySet {
            get {
                return ResourceManager.GetString("DataContractNamespaceAlreadySet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContract namespace &apos;{0}&apos; is not a valid URI..
        /// </summary>
        internal static string DataContractNamespaceIsNotValid {
            get {
                return ResourceManager.GetString("DataContractNamespaceIsNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContract namespace &apos;{0}&apos; cannot be specified since it is reserved..
        /// </summary>
        internal static string DataContractNamespaceReserved {
            get {
                return ResourceManager.GetString("DataContractNamespaceReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}.{1}&apos; has DataMemberAttribute attribute. Use EnumMemberAttribute attribute instead..
        /// </summary>
        internal static string DataMemberOnEnumField {
            get {
                return ResourceManager.GetString("DataMemberOnEnumField", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContract with name &apos;{0}&apos; and namespace &apos;{1}&apos; cannot be added to DataContractSet since another contract with the same data contract name is already present and the contracts are not equivalent..
        /// </summary>
        internal static string DupContractInDataContractSet {
            get {
                return ResourceManager.GetString("DupContractInDataContractSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be added to list of known types since another type &apos;{1}&apos; with the same data contract name &apos;{2}:{3}&apos; is already present. If there are different collections of a particular type - for example, List&lt;Test&gt; and Test[], they cannot both be added as known types.  Consider specifying only one of these types for addition to the known types list..
        /// </summary>
        internal static string DupContractInKnownTypes {
            get {
                return ResourceManager.GetString("DupContractInKnownTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{2}&apos; contains two members &apos;{0}&apos; &apos;and &apos;{1}&apos; with the same name &apos;{3}&apos;. Multiple members with the same name in one type are not supported. Consider changing one of the member names using EnumMemberAttribute attribute..
        /// </summary>
        internal static string DupEnumMemberValue {
            get {
                return ResourceManager.GetString("DupEnumMemberValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection data contract type &apos;{0}&apos; specifies the same value &apos;{1}&apos; for both the KeyName and the ValueName properties. This is not allowed. Consider changing either the KeyName or the ValueName property..
        /// </summary>
        internal static string DupKeyValueName {
            get {
                return ResourceManager.GetString("DupKeyValueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid Callback. Method &apos;{3}&apos; in type &apos;{2}&apos; has both &apos;{0}&apos; and &apos;{1}&apos;..
        /// </summary>
        internal static string DuplicateAttribute {
            get {
                return ResourceManager.GetString("DuplicateAttribute", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid attribute. Both &apos;{0}&apos; and &apos;{1}&apos; in type &apos;{2}&apos; have &apos;{3}&apos;..
        /// </summary>
        internal static string DuplicateCallback {
            get {
                return ResourceManager.GetString("DuplicateCallback", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid IExtensibleDataObject. Both &apos;{0}&apos; and &apos;{1}&apos; in type &apos;{2}&apos; provide property setter..
        /// </summary>
        internal static string DuplicateExtensionDataSetMethod {
            get {
                return ResourceManager.GetString("DuplicateExtensionDataSetMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{2}&apos; contains two members &apos;{0}&apos; &apos;and &apos;{1}&apos; with the same data member name &apos;{3}&apos;. Multiple members with the same name in one type are not supported. Consider changing one of the member names using DataMemberAttribute attribute..
        /// </summary>
        internal static string DupMemberName {
            get {
                return ResourceManager.GetString("DupMemberName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DataContract for type &apos;{0}&apos; cannot be added to DataContractSet since type &apos;{1}&apos; with the same data contract name &apos;{2}&apos; in namespace &apos;{3}&apos; is already present and the contracts are not equivalent..
        /// </summary>
        internal static string DupTypeContractInDataContractSet {
            get {
                return ResourceManager.GetString("DupTypeContractInDataContractSet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enum type &apos;{0}&apos; cannot have the IsReference setting of &apos;{1}&apos;. Either change the setting to &apos;{2}&apos;, or remove it completely..
        /// </summary>
        internal static string EnumTypeCannotHaveIsReference {
            get {
                return ResourceManager.GetString("EnumTypeCannotHaveIsReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IExtensibleDataObject property setter &apos;{1}&apos; in type &apos;{0}&apos; must return void..
        /// </summary>
        internal static string ExtensionDataSetMustReturnVoid {
            get {
                return ResourceManager.GetString("ExtensionDataSetMustReturnVoid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IExtensibleDataObject property setter &apos;{1}&apos; in type &apos;{0}&apos; must have a single parameter of type &apos;{2}&apos;..
        /// </summary>
        internal static string ExtensionDataSetParameterInvalid {
            get {
                return ResourceManager.GetString("ExtensionDataSetParameterInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The data contract name &apos;{0}&apos; for type &apos;{1}&apos; has a curly brace that is not matched with a closing curly brace. Curly braces have special meaning in data contract names - they are used to customize the naming of data contracts for generic types..
        /// </summary>
        internal static string GenericNameBraceMismatch {
            get {
                return ResourceManager.GetString("GenericNameBraceMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to In the data contract name for type &apos;{1}&apos;, there are curly braces with &apos;{0}&apos; inside, which is an invalid value. Curly braces have special meaning in data contract names - they are used to customize the naming of data contracts for generic types. Based on the number of generic parameters this type has, the contents of the curly braces must either be a number between 0 and &apos;{2}&apos; to insert the name of the generic parameter at that index or the &apos;#&apos; symbol to insert a digest of the generic parameter namespaces..
        /// </summary>
        internal static string GenericParameterNotValid {
            get {
                return ResourceManager.GetString("GenericParameterNotValid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be exported as a schema type because it is an open generic type. You can only export a generic type if all its generic parameter types are actual types..
        /// </summary>
        internal static string GenericTypeNotExportable {
            get {
                return ResourceManager.GetString("GenericTypeNotExportable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IsReference setting for type &apos;{0}&apos; is &apos;{1}&apos;, but the same setting for its parent class &apos;{2}&apos; is &apos;{3}&apos;. Derived types must have the same value for IsReference as the base type. Change the setting on type &apos;{0}&apos; to &apos;{3}&apos;, or on type &apos;{2}&apos; to &apos;{1}&apos;, or do not set IsReference explicitly..
        /// </summary>
        internal static string InconsistentIsReference {
            get {
                return ResourceManager.GetString("InconsistentIsReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Property &apos;{1}&apos; in type &apos;{0}&apos; cannot be serialized because serialization of indexed properties is not supported..
        /// </summary>
        internal static string IndexedPropertyCannotBeSerialized {
            get {
                return ResourceManager.GetString("IndexedPropertyCannotBeSerialized", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection data contract type &apos;{0}&apos; specifies &apos;{1}&apos; for the KeyName property. This is not allowed since the type is not IDictionary. Remove the setting for the KeyName property..
        /// </summary>
        internal static string InvalidCollectionContractKeyNoDictionary {
            get {
                return ResourceManager.GetString("InvalidCollectionContractKeyNoDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The collection data contract type &apos;{0}&apos; specifies &apos;{1}&apos; for the ValueName property. This is not allowed since the type is not IDictionary. Remove the setting for the ValueName property..
        /// </summary>
        internal static string InvalidCollectionContractValueNoDictionary {
            get {
                return ResourceManager.GetString("InvalidCollectionContractValueNoDictionary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; with CollectionDataContractAttribute attribute is an invalid collection type since it.
        /// </summary>
        internal static string InvalidCollectionDataContract {
            get {
                return ResourceManager.GetString("InvalidCollectionDataContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is an invalid collection type since it.
        /// </summary>
        internal static string InvalidCollectionType {
            get {
                return ResourceManager.GetString("InvalidCollectionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; in namespace &apos;{1}&apos; is not a valid base type for enum &apos;{2}&apos; in namespace &apos;{3}&apos;..
        /// </summary>
        internal static string InvalidEnumBaseType {
            get {
                return ResourceManager.GetString("InvalidEnumBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot have MethodName on XmlSchemaProviderAttribute attribute set to null or empty string..
        /// </summary>
        internal static string InvalidGetSchemaMethod {
            get {
                return ResourceManager.GetString("InvalidGetSchemaMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to CLR namespace &apos;{0}&apos; cannot have ContractNamespace set to null..
        /// </summary>
        internal static string InvalidGlobalDataContractNamespace {
            get {
                return ResourceManager.GetString("InvalidGlobalDataContractNamespace", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}.{1}&apos; cannot be serialized since it is neither a field nor a property, and therefore cannot be marked with the DataMemberAttribute attribute. Remove the DataMemberAttribute attribute from the &apos;{1}&apos; member..
        /// </summary>
        internal static string InvalidMember {
            get {
                return ResourceManager.GetString("InvalidMember", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}.{1}()&apos; returns a non-null value. The return value must be null since IsAny=true..
        /// </summary>
        internal static string InvalidNonNullReturnValueByIsAny {
            get {
                return ResourceManager.GetString("InvalidNonNullReturnValueByIsAny", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}.GetSchema()&apos; must return a schema with a valid Id..
        /// </summary>
        internal static string InvalidReturnSchemaOnGetSchemaMethod {
            get {
                return ResourceManager.GetString("InvalidReturnSchemaOnGetSchemaMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method &apos;{0}.{1}()&apos; returns &apos;{2}&apos;. The return type must be compatible with &apos;{3}&apos; or &apos;{4}&apos;..
        /// </summary>
        internal static string InvalidReturnTypeOnGetSchemaMethod {
            get {
                return ResourceManager.GetString("InvalidReturnTypeOnGetSchemaMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to XML data contract Name for type &apos;{0}&apos; cannot be set to null or empty string..
        /// </summary>
        internal static string InvalidXmlDataContractName {
            get {
                return ResourceManager.GetString("InvalidXmlDataContractName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot specify an XmlRootAttribute attribute because its IsAny setting is &apos;true&apos;. This type must write all its contents including the root element. Verify that the IXmlSerializable implementation is correct..
        /// </summary>
        internal static string IsAnyCannotHaveXmlRoot {
            get {
                return ResourceManager.GetString("IsAnyCannotHaveXmlRoot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be ISerializable and have DataContractAttribute attribute..
        /// </summary>
        internal static string ISerializableCannotHaveDataContract {
            get {
                return ResourceManager.GetString("ISerializableCannotHaveDataContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}.{1}&apos; has the IsRequired setting of &apos;{2}. However, &apos;{0}&apos; has the IsReference setting of &apos;{2}&apos;, because either it is set explicitly, or it is derived from a base class. Set IsRequired on &apos;{0}.{1}&apos; to false, or disable IsReference on &apos;{0}&apos;. .
        /// </summary>
        internal static string IsRequiredDataMemberOnIsReferenceDataContractType {
            get {
                return ResourceManager.GetString("IsRequiredDataMemberOnIsReferenceDataContractType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be IXmlSerializable and have CollectionDataContractAttribute attribute..
        /// </summary>
        internal static string IXmlSerializableCannotHaveCollectionDataContract {
            get {
                return ResourceManager.GetString("IXmlSerializableCannotHaveCollectionDataContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be IXmlSerializable and have DataContractAttribute attribute..
        /// </summary>
        internal static string IXmlSerializableCannotHaveDataContract {
            get {
                return ResourceManager.GetString("IXmlSerializableCannotHaveDataContract", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method name specified by KnownTypeAttribute attribute on type &apos;{0}&apos; cannot be the empty string..
        /// </summary>
        internal static string KnownTypeAttributeEmptyString {
            get {
                return ResourceManager.GetString("KnownTypeAttributeEmptyString", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method specified by KnownTypeAttribute attribute on type &apos;{0}&apos; returned null..
        /// </summary>
        internal static string KnownTypeAttributeMethodNull_ {
            get {
                return ResourceManager.GetString("KnownTypeAttributeMethodNull ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KnownTypeAttribute attribute on type &apos;{0}&apos; contains no data..
        /// </summary>
        internal static string KnownTypeAttributeNoData {
            get {
                return ResourceManager.GetString("KnownTypeAttributeNoData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos;: If a KnownTypeAttribute attribute specifies a method it must be the only KnownTypeAttribute attribute on that type..
        /// </summary>
        internal static string KnownTypeAttributeOneScheme {
            get {
                return ResourceManager.GetString("KnownTypeAttributeOneScheme", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KnownTypeAttribute attribute on type &apos;{0}&apos; specifies a method named &apos;{1}&apos; to provide known types. The return type of this method is invalid because it is not assignable to IEnumerable&lt;Type&gt;. Ensure that the method exists and has a valid signature..
        /// </summary>
        internal static string KnownTypeAttributeReturnType_ {
            get {
                return ResourceManager.GetString("KnownTypeAttributeReturnType ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to KnownTypeAttribute attribute on type &apos;{1}&apos; specifies a method named &apos;{0}&apos; to provide known types. Static method &apos;{0}()&apos; was not found on this type. Ensure that the method exists and is marked as static..
        /// </summary>
        internal static string KnownTypeAttributeUnknownMethod {
            get {
                return ResourceManager.GetString("KnownTypeAttributeUnknownMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Method specified by KnownTypeAttribute attribute on type &apos;{0}&apos; does not expose valid types..
        /// </summary>
        internal static string KnownTypeAttributeValidMethodTypes {
            get {
                return ResourceManager.GetString("KnownTypeAttributeValidMethodTypes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Declared type &apos;{0}&apos; in config cannot be a closed or partial generic type..
        /// </summary>
        internal static string KnownTypeConfigClosedGenericDeclared {
            get {
                return ResourceManager.GetString("KnownTypeConfigClosedGenericDeclared", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; in config has &apos;{1}&apos; generic parameter(s) but &apos;{2}&apos; generic argument(s) were provided. The number of generic arguments must match the number of generic parameters..
        /// </summary>
        internal static string KnownTypeConfigGenericParamMismatch {
            get {
                return ResourceManager.GetString("KnownTypeConfigGenericParamMismatch", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; in config has &apos;{1}&apos; generic parameters(s). Parameter &apos;{2}&apos; cannot be accessed. Parameter index must be greater than or equal to 0 and less than &apos;{1}&apos;..
        /// </summary>
        internal static string KnownTypeConfigIndexOutOfBounds {
            get {
                return ResourceManager.GetString("KnownTypeConfigIndexOutOfBounds", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The type &apos;{0}&apos; in config has &apos;{1}&apos; generic parameters(s). Parameter &apos;{2}&apos; cannot be accessed..
        /// </summary>
        internal static string KnownTypeConfigIndexOutOfBoundsZero {
            get {
                return ResourceManager.GetString("KnownTypeConfigIndexOutOfBoundsZero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; does not have a static method &apos;{1}&apos; that takes a parameter of type &apos;System.Xml.Schema.XmlSchemaSet&apos; as specified by the XmlSchemaProviderAttribute attribute..
        /// </summary>
        internal static string MissingGetSchemaMethod {
            get {
                return ResourceManager.GetString("MissingGetSchemaMethod", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Schema type &apos;{0}&apos; returned by CLR type &apos;{1}&apos; is not found in the XmlSchemaSet..
        /// </summary>
        internal static string MissingSchemaType {
            get {
                return ResourceManager.GetString("MissingSchemaType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No get method for property &apos;{1}&apos; in type &apos;{0}&apos;..
        /// </summary>
        internal static string NoGetMethodForProperty {
            get {
                return ResourceManager.GetString("NoGetMethodForProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Type &apos;{0}&apos; must have a parameterless constructor..
        /// </summary>
        internal static string NonAttributedSerializableTypesMustHaveDefaultConstructor {
            get {
                return ResourceManager.GetString("NonAttributedSerializableTypesMustHaveDefaultConstructor", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}.{1}&apos; is not marked with OptionalFieldAttribute, thus indicating that it must be serialized. However, &apos;{0}&apos; derives from a class marked with DataContractAttribute and an IsReference setting of &apos;{2}&apos;. It is not possible to have required data members on IsReference classes. Either decorate &apos;{0}.{1}&apos; with OptionalFieldAttribute, or disable the IsReference setting on the appropriate parent class..
        /// </summary>
        internal static string NonOptionalFieldMemberOnIsReferenceSerializableType {
            get {
                return ResourceManager.GetString("NonOptionalFieldMemberOnIsReferenceSerializableType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No set method for property &apos;{1}&apos; in type &apos;{0}&apos;..
        /// </summary>
        internal static string NoSetMethodForProperty {
            get {
                return ResourceManager.GetString("NoSetMethodForProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; does not have DataContractAttribute attribute and therefore cannot support IExtensibleDataObject. .
        /// </summary>
        internal static string OnlyDataContractTypesCanHaveExtensionData {
            get {
                return ResourceManager.GetString("OnlyDataContractTypesCanHaveExtensionData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} The class cannot be deserialized..
        /// </summary>
        internal static string ReadOnlyClassDeserialization {
            get {
                return ResourceManager.GetString("ReadOnlyClassDeserialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Collection type &apos;{0}&apos; cannot be deserialized since it.
        /// </summary>
        internal static string ReadOnlyCollectionDeserialization {
            get {
                return ResourceManager.GetString("ReadOnlyCollectionDeserialization", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is a recursive collection data contract which is not supported. Consider modifying the definition of collection &apos;{0}&apos; to remove references to itself..
        /// </summary>
        internal static string RecursiveCollectionType {
            get {
                return ResourceManager.GetString("RecursiveCollectionType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReferencedCollectionTypes specified via ImportOptions must contain valid types. Cannot contain null..
        /// </summary>
        internal static string ReferencedCollectionTypesCannotContainNull {
            get {
                return ResourceManager.GetString("ReferencedCollectionTypesCannotContainNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (matching).
        /// </summary>
        internal static string ReferencedTypeMatchingMessage {
            get {
                return ResourceManager.GetString("ReferencedTypeMatchingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to (not matching).
        /// </summary>
        internal static string ReferencedTypeNotMatchingMessage {
            get {
                return ResourceManager.GetString("ReferencedTypeNotMatchingMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ReferencedTypes specified via ImportOptions must contain valid types. Cannot contain null..
        /// </summary>
        internal static string ReferencedTypesCannotContainNull {
            get {
                return ResourceManager.GetString("ReferencedTypesCannotContainNull", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Only classes can be generated as ISerializable..
        /// </summary>
        internal static string RequiresClassDataContractToSetIsISerializable {
            get {
                return ResourceManager.GetString("RequiresClassDataContractToSetIsISerializable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multi-dimensional arrays are not supported..
        /// </summary>
        internal static string SupportForMultidimensionalArraysNotPresent {
            get {
                return ResourceManager.GetString("SupportForMultidimensionalArraysNotPresent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using surrogates with get-only collection properties is not supported.  Consider removing the surrogate associated with &apos;{0}&apos; or adding a setter to &apos;{1}.{2}&apos;..
        /// </summary>
        internal static string SurrogatesWithGetOnlyCollectionsNotSupported {
            get {
                return ResourceManager.GetString("SurrogatesWithGetOnlyCollectionsNotSupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; has more than one CollectionDataContractAttribute attribute..
        /// </summary>
        internal static string TooManyCollectionContracts {
            get {
                return ResourceManager.GetString("TooManyCollectionContracts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; has more than one DataContractAttribute attribute..
        /// </summary>
        internal static string TooManyDataContracts {
            get {
                return ResourceManager.GetString("TooManyDataContracts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}.{1}&apos; has more than one DataMemberAttribute attribute..
        /// </summary>
        internal static string TooManyDataMembers {
            get {
                return ResourceManager.GetString("TooManyDataMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}.{1}&apos; has more than one EnumMemberAttribute attribute..
        /// </summary>
        internal static string TooManyEnumMembers {
            get {
                return ResourceManager.GetString("TooManyEnumMembers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Member &apos;{0}.{1}&apos; has more than one IgnoreDataMemberAttribute attribute..
        /// </summary>
        internal static string TooManyIgnoreDataMemberAttributes {
            get {
                return ResourceManager.GetString("TooManyIgnoreDataMemberAttributes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Error while getting known types for Type &apos;{0}&apos;. The type must not be an open or partial generic class..
        /// </summary>
        internal static string TypeMustBeConcrete {
            get {
                return ResourceManager.GetString("TypeMustBeConcrete", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; is not a fully instantiated generic class..
        /// </summary>
        internal static string TypeMustNotBeOpenGeneric {
            get {
                return ResourceManager.GetString("TypeMustNotBeOpenGeneric", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Type &apos;{0}&apos; cannot be serialized. Consider marking it with the DataContractAttribute attribute, and marking all of its members you want serialized with the DataMemberAttribute attribute.  If the type is a collection, consider marking it with the CollectionDataContractAttribute.  See the Microsoft .NET Framework documentation for other supported types..
        /// </summary>
        internal static string TypeNotSerializable {
            get {
                return ResourceManager.GetString("TypeNotSerializable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Data contract &apos;{0}&apos; from namespace &apos;{1}&apos; is a value type and cannot have base contract &apos;{2}&apos; from namespace &apos;{3}&apos;..
        /// </summary>
        internal static string ValueTypeCannotHaveBaseType {
            get {
                return ResourceManager.GetString("ValueTypeCannotHaveBaseType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Value type &apos;{0}&apos; cannot have the IsReference setting of &apos;{1}&apos;. Either change the setting to &apos;{2}&apos;, or remove it completely..
        /// </summary>
        internal static string ValueTypeCannotHaveIsReference {
            get {
                return ResourceManager.GetString("ValueTypeCannotHaveIsReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &apos;{0}&apos; cannot be parsed as the type &apos;{1}&apos;..
        /// </summary>
        internal static string XmlInvalidConversion {
            get {
                return ResourceManager.GetString("XmlInvalidConversion", resourceCulture);
            }
        }
    }
}
